"use strict";(self.webpackChunkeverscale_docs_website=self.webpackChunkeverscale_docs_website||[]).push([[7750],{3905:(a,e,t)=>{t.d(e,{Zo:()=>o,kt:()=>u});var n=t(7294);function s(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function m(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?m(Object(t),!0).forEach((function(e){s(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function p(a,e){if(null==a)return{};var t,n,s=function(a,e){if(null==a)return{};var t,n,s={},m=Object.keys(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||(s[t]=a[t]);return s}(a,e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(s[t]=a[t])}return s}var l=n.createContext({}),i=function(a){var e=n.useContext(l),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},o=function(a){var e=i(a.components);return n.createElement(l.Provider,{value:e},a.children)},c="mdxType",N={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(a,e){var t=a.components,s=a.mdxType,m=a.originalType,l=a.parentName,o=p(a,["components","mdxType","originalType","parentName"]),c=i(t),k=s,u=c["".concat(l,".").concat(k)]||c[k]||N[k]||m;return t?n.createElement(u,r(r({ref:e},o),{},{components:t})):n.createElement(u,r({ref:e},o))}));function u(a,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof a||s){var m=t.length,r=new Array(m);r[0]=k;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=a,p[c]="string"==typeof a?a:s,r[1]=p;for(var i=2;i<m;i++)r[i]=t[i];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},1094:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>N,frontMatter:()=>m,metadata:()=>p,toc:()=>i});var n=t(7462),s=(t(7294),t(3905));const m={description:"Transaction executor functional specification"},r="Transaction executor",p={unversionedId:"arch/executor",id:"arch/executor",title:"Transaction executor",description:"Transaction executor functional specification",source:"@site/../../src/arch/35-executor.md",sourceDirName:"arch",slug:"/arch/executor",permalink:"/arch/executor",draft:!1,editUrl:"https://github.com/everscale-org/docs/edit/main/.build/website/../../src/arch/35-executor.md",tags:[],version:"current",lastUpdatedAt:1693835149,formattedLastUpdatedAt:"Sep 4, 2023",sidebarPosition:35,frontMatter:{description:"Transaction executor functional specification"},sidebar:"tutorialSidebar",previous:{title:"Gas Calculation",permalink:"/arch/managing-gas"},next:{title:"Logical Time",permalink:"/arch/logic-time"}},l={},i=[{value:"Introduction",id:"introduction",level:2},{value:"Document Structure",id:"document-structure",level:2},{value:"Everscale Platform Architecture",id:"everscale-platform-architecture",level:2},{value:"The platform overall architecture is depicted",id:"the-platform-overall-architecture-is-depicted",level:4},{value:"Platform Implementation",id:"platform-implementation",level:2},{value:"Transaction Executor Module",id:"transaction-executor-module",level:2},{value:"Remark",id:"remark",level:3},{value:"Inputs and Outputs",id:"inputs-and-outputs",level:3},{value:"The principal architecture of the module is depicted",id:"the-principal-architecture-of-the-module-is-depicted",level:5},{value:"Multichain Architecture",id:"multichain-architecture",level:3},{value:"Multicurrency payments",id:"multicurrency-payments",level:3},{value:"Hashing Algorithm",id:"hashing-algorithm",level:3},{value:"Parameters",id:"parameters",level:2},{value:"ExecuteParams fields",id:"executeparams-fields",level:4},{value:"Transaction",id:"transaction",level:2},{value:"ExecuteParams fields",id:"executeparams-fields-1",level:4},{value:"Transaction Executor",id:"transaction-executor-1",level:2},{value:"Transaction executor message processing general scheme",id:"transaction-executor-message-processing-general-scheme",level:4},{value:"Transaction Executor Types",id:"transaction-executor-types",level:3},{value:"Main Entry Point",id:"main-entry-point",level:3},{value:"ExecuteParams fields",id:"executeparams-fields-2",level:4},{value:"BlockchainConfig parameters",id:"blockchainconfig-parameters",level:3},{value:"Code Execution Fee",id:"code-execution-fee",level:3},{value:"Message Passing Fee",id:"message-passing-fee",level:3},{value:"Data Storage Fee",id:"data-storage-fee",level:3},{value:"Data Storage Fee Calculation",id:"data-storage-fee-calculation",level:4},{value:"Data Storage Fee Calculation Algorithm",id:"data-storage-fee-calculation-algorithm",level:4},{value:"Special Smart-Contracts",id:"special-smart-contracts",level:3},{value:"GlobalCapabilities Options",id:"globalcapabilities-options",level:3},{value:"RawConfig options",id:"rawconfig-options",level:3},{value:"Error Code Enumeration",id:"error-code-enumeration",level:3},{value:"Error Code Enumeration",id:"error-code-enumeration-1",level:3},{value:"Account State Update",id:"account-state-update",level:3},{value:"Transaction Description Object",id:"transaction-description-object",level:3},{value:"Storage Phase Descriptor",id:"storage-phase-descriptor",level:4},{value:"Credit Phase Descriptor",id:"credit-phase-descriptor",level:4},{value:"Compute Phase Descriptor",id:"compute-phase-descriptor",level:4},{value:"Choice 1. Skipped",id:"choice-1-skipped",level:5},{value:"Choice 2. Successful computation",id:"choice-2-successful-computation",level:5},{value:"Action Phase Descriptor",id:"action-phase-descriptor",level:4},{value:"Action Result Codes",id:"action-result-codes",level:4},{value:"Remarks:",id:"remarks",level:5},{value:"Bounce Phase Transaction Descriptor",id:"bounce-phase-transaction-descriptor",level:4},{value:"Choice 1. Nofunds",id:"choice-1-nofunds",level:5},{value:"Choice 2. Ok(TrBouncePhaseOk)",id:"choice-2-oktrbouncephaseok",level:5},{value:"Actions",id:"actions",level:2},{value:"Type of Actions",id:"type-of-actions",level:3},{value:"Action SendMsg",id:"action-sendmsg",level:3},{value:"Action ReserveCurrency",id:"action-reservecurrency",level:3},{value:"Action SetCode",id:"action-setcode",level:3},{value:"Message Processing Algorithm",id:"message-processing-algorithm",level:2},{value:"Internal Message Processing Algorithm",id:"internal-message-processing-algorithm",level:2},{value:"External Message Processing Algorithm",id:"external-message-processing-algorithm",level:2},{value:"Credit Phase",id:"credit-phase",level:2},{value:"Storage Phase",id:"storage-phase",level:2},{value:"Compute Phase",id:"compute-phase",level:2},{value:"Compute Phase Success Conditions",id:"compute-phase-success-conditions",level:3},{value:"Compute Phase Exit Code",id:"compute-phase-exit-code",level:3},{value:"Calculate Gas Fee Algorithm",id:"calculate-gas-fee-algorithm",level:3},{value:"Compute New State Algorithm",id:"compute-new-state-algorithm",level:3},{value:"Activate By Init Algorithm",id:"activate-by-init-algorithm",level:3},{value:"Initial Gas Algorithm",id:"initial-gas-algorithm",level:3},{value:"Account From Message Algorithm",id:"account-from-message-algorithm",level:3},{value:"Action Phase",id:"action-phase",level:2},{value:"Action Phase Success Condition",id:"action-phase-success-condition",level:3},{value:"Action Phase Validity Condition",id:"action-phase-validity-condition",level:3},{value:"SendMsg Action Handler",id:"sendmsg-action-handler",level:3},{value:"ReserveCurrency Action Handler",id:"reservecurrency-action-handler",level:3},{value:"Bounce Phase",id:"bounce-phase",level:2},{value:"Functional Properties",id:"functional-properties",level:2},{value:"Risks",id:"risks",level:3},{value:"Financial Risks",id:"financial-risks",level:4},{value:"Behavioral Risks",id:"behavioral-risks",level:4},{value:"Assumptions",id:"assumptions",level:3},{value:"System Properties",id:"system-properties",level:3},{value:"Fees",id:"fees",level:4},{value:"Message Processing",id:"message-processing",level:4},{value:"Credit Phase Processing",id:"credit-phase-processing",level:4},{value:"Storage Phase Processing",id:"storage-phase-processing",level:4},{value:"Compute Phase Processing",id:"compute-phase-processing",level:4},{value:"Action Phase Processing",id:"action-phase-processing",level:4},{value:"Bounce Phase Processing",id:"bounce-phase-processing",level:4},{value:"Footnotes",id:"footnotes",level:2}],o={toc:i},c="wrapper";function N(a){let{components:e,...t}=a;return(0,s.kt)(c,(0,n.Z)({},o,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"transaction-executor"},"Transaction executor"),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"Transaction Executor is a crucial part of ",(0,s.kt)("em",{parentName:"p"},"Everscale")," blockchain node. It applies incoming messages to accounts, sealing\nthe end result of this operation into a block in the form of a transaction object."),(0,s.kt)("p",null,"The Transaction Executor algorithms determine several critical aspects of smart-contracts behavior, such as:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"How a balance of an account is affected after the message gets processed"),(0,s.kt)("li",{parentName:"ul"},"What outbound messages will be generated as a result"),(0,s.kt)("li",{parentName:"ul"},"Should the account be frozen or deleted?"),(0,s.kt)("li",{parentName:"ul"},"What fees should be charged from the accounts balance")),(0,s.kt)("p",null,"To be able to rigorously reason about a smart-contract behavior, it is important to construct the accurate model of this\nmodule, explain the main concepts, define its properties. In other words, make the\ngroundwork for you, the reader, to foster the integration of this logic into the reasoning framework of your choice."),(0,s.kt)("p",null,"In the current work, we made the best-effort attempt to write such specification."),(0,s.kt)("h2",{id:"document-structure"},"Document Structure"),(0,s.kt)("p",null,"The document consists of two logical parts, intermixed with each other:\nthe explanation part and the specification part."),(0,s.kt)("p",null,"The explanation part is done by providing extensive comments for\ndata structures used through-out the Transaction Executor. The data\nstructures are presented as Rust code snippets, taken from the\noriginal Node code. Sometimes, we intentionally omit details that\nare not relevant to the Transaction Executor, requiring much wider\ncontext to be explained."),(0,s.kt)("p",null,"The specification part is presented in two flavors. When the\nprecision is required, we describe the behavior by providing the\npseudo-code implementing some algorithm. For more general\nproperties, we formulate them in a form of semi-formal statements\nabout the system behavior."),(0,s.kt)("p",null,"By comparison to the program implementation, the specification\npseudo-code ",(0,s.kt)("inlineCode",{parentName:"p"},"overapproximates"),"  the implementation by throwing away\nnon-relevant parts of the logic, for example: sophisticated error\nhandling, non-interesting parts of the state being removed,\nintroducing reasonable assumptions that greatly simplifies the\nlogic, etc."),(0,s.kt)("p",null,"In other words, the pseudo-code shows how the system behaves for\nits significant parts, putting away everything else."),(0,s.kt)("h2",{id:"everscale-platform-architecture"},"Everscale Platform Architecture"),(0,s.kt)("p",null,"The main actors of the EverScale blockchain are smart-contracts.\nSmart-contracts are programs that operate user valuable assets on their behalf. Valuable assets are usually\ncryptocurrency tokens or some digital goods, like NFTs."),(0,s.kt)("p",null,"Smart-contract execution is triggered by a message sent from some other party. If the message was delivered from the\noutside world (i.e. from the user program), it is said to be ",(0,s.kt)("em",{parentName:"p"},"external"),". Otherwise, the message is considered ",(0,s.kt)("em",{parentName:"p"},"internal"),"\n."),(0,s.kt)("p",null,"Smart-contracts may also generate log records called ",(0,s.kt)("em",{parentName:"p"},"events"),". Those records are used as information signals for an\nexternal observers. They foster communication between smart-contracts and off-chain programs."),(0,s.kt)("h4",{id:"the-platform-overall-architecture-is-depicted"},"The platform overall architecture is depicted"),(0,s.kt)("img",{src:"https://www.plantuml.com/plantuml/png/NOyn2iCm34Ltdq8No92C6GejTEYS4xYAY4rL6sGb54hkNjKq9Qq7cSz__j_Ig4mzd1UIWfu9hfpnXi77125EeM5QYC4BXgY4EWivvr6pm94ZcgWND0SuVLzQtaD9acUuKob-CWmvp-EEWQS3E-Ob1Uj8MZLw6K75fs8bCM_O1Wxjh-m-ScZVFnYw7Yxfh_bjhtNkOuskfNLrInB2BADRNm00",alt:null}),(0,s.kt)("h2",{id:"platform-implementation"},"Platform Implementation"),(0,s.kt)("p",null,"EverScale blockchain is a database operated by a peer-to-peer network of computing nodes. The database store users code\nand data in a form of programmable units called smart-contracts. Smart-contacts may communicate with other contracts and\noutside world by sending messages."),(0,s.kt)("p",null,"The computing node is called blockchain node in our context."),(0,s.kt)("p",null,"Among other things, blockchain nodes are responsible for storing the smart-contract state, delivering messages from\nusers and smart-contracts, executing the smart-contacts code when needed."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Transaction Executor")," module is a part of the blockchain node responsible for proper execution of a smart-contract code\nupon receiving a message addressed to that smart-contract. The result of this execution is an updated smart-contract\nstate and the transaction record that gets sealed into the block candidate."),(0,s.kt)("p",null,"We now go into details on the internals of this module."),(0,s.kt)("h2",{id:"transaction-executor-module"},"Transaction Executor Module"),(0,s.kt)("p",null,"In this section, we go into the technical details of Transaction Executor module. The source code of the module is\navailable ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/ton-labs-executor/tree/a28bde3e65dd35573d34e32aa4477d60162b5338"},"here"),"."),(0,s.kt)("h3",{id:"remark"},"Remark"),(0,s.kt)("p",null,"In our opinion, the name of this module was chosen quite unfortunate. In its current form, it feels like the object being executed is a transaction. This is not true."),(0,s.kt)("p",null,"Transaction is an outcome of executing a message on a smart-contract state using the Transaction Executor logic. Hence, it is the message that is being executed, not the transaction."),(0,s.kt)("p",null,"Nevertheless, we stick with the original name not to confuse developers too much."),(0,s.kt)("h3",{id:"inputs-and-outputs"},"Inputs and Outputs"),(0,s.kt)("h5",{id:"the-principal-architecture-of-the-module-is-depicted"},"The principal architecture of the module is depicted"),(0,s.kt)("img",{src:"https://www.plantuml.com/plantuml/png/ROun2W8n44Nxd698OxKNi12sI64XMkG2GmmIS6UMP0A2xDqt2Gags0sFF_zz2VBqHx0HAQ6Jm0JcvLqMZaevZ7Suqveb0IO816y5qEZ5fuGFty0suEmSPv9VUCE8I-fiAwMyh4o-nFG_gwucQxhyccNOESj7__rPyuFhFk7GQkPGXMNsD9rgfpLGZbAq0m00",alt:null}),(0,s.kt)("p",null,"We now describe each input/output entity in detail, together with the logic of the computation."),(0,s.kt)("h3",{id:"multichain-architecture"},"Multichain Architecture"),(0,s.kt)("p",null,"Everscale has a native support for multiple blockchains running in parallel."),(0,s.kt)("p",null,"Each blockchain might be established by introducing a separate chain called workchain. Each workchain has a unique\ninteger identifier in a range ",(0,s.kt)("inlineCode",{parentName:"p"},"-127 ... 127"),", the values ",(0,s.kt)("inlineCode",{parentName:"p"},"-1")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"0")," are already\ntaken. Smart-contracts from different workchains may interact with each other by message passing."),(0,s.kt)("p",null,"At the moment, the system implements only two workchains \u2014 Masterchain (",(0,s.kt)("inlineCode",{parentName:"p"},"id -1"),") and Workchain (",(0,s.kt)("inlineCode",{parentName:"p"},"id 0"),")."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"Currently, the creation of new workchains is not supported.")),(0,s.kt)("h3",{id:"multicurrency-payments"},"Multicurrency payments"),(0,s.kt)("p",null,"The native coin of Everscale blockchain is called ",(0,s.kt)("em",{parentName:"p"},"EVER"),". However, Everscale has an ability to work with other types of\ncoins. While system payments like gas and storage fees are made only in Evers, the other value transfers may contain\ncoins of other\ncurrencies. This contrasts with most of other blockchains where there is only a single native cryptocurrency, and other\ncurrencies\nmay be made only using artificial token smart-contracts."),(0,s.kt)("p",null,"Currently, this feature is not used widely."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"In this document, we limit our specification effort only for the case of a single currency \u2014 Evers. This choice\nsignificantly simplifies the business logic of the execution handlers.")),(0,s.kt)("h3",{id:"hashing-algorithm"},"Hashing Algorithm"),(0,s.kt)("p",null,"Transaction Executor uses hashing in several places to compactly store data structures fingerprints. It is done in two\nsteps. First, the data structure gets converted into a tree-like form. Then, a special\nhashing algorithm is applied to that tree. The basic hash function used is ",(0,s.kt)("inlineCode",{parentName:"p"},"SHA256")," from ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/sha2/latest/sha2/"},"Sha2 Rust\npackage"),"."),(0,s.kt)("p",null,"The exact hashing algorithm, as well as tree-like representation is not interesting for our purposes, so we do not\nconsider it here. For details,\ncheck ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/ton-labs-types/blob/af1dc71a9a2b46cb0d55a0956e44726374ba7c0c/src/cell/mod.rs#L841"},"this"),"."),(0,s.kt)("h2",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,"Besides, incoming  message and  account, Transaction Executor  has to  have some\nexternal   information  regarding   the   current  blockchain   and\nnon-blockchain state to support the TVM capabilities.  For example,\nit   has   to  know   the   current   time   to  provide   it   for\nsmart-contracts. It  has to  have some random  seed to  support the\nrandom number generator  facility. All of this is  passed using the\nExecuteParams structure."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct ExecuteParams {\n  pub state_libs: HashmapE,\n  pub block_unixtime: u32,\n  pub block_lt: u64,\n  pub last_tr_lt: Arc<AtomicU64>,\n  pub seed_block: UInt256,\n  pub debug: bool\n}\n")),(0,s.kt)("h4",{id:"executeparams-fields"},"ExecuteParams fields"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"state_libs"),(0,s.kt)("td",{parentName:"tr",align:null},"A set of references to external libraries. This mechanism is not supported currently")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"block_unixtime"),(0,s.kt)("td",{parentName:"tr",align:null},"Current time in Unix Epoch")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"block_lt"),(0,s.kt)("td",{parentName:"tr",align:null},"Block logical time")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"last_tr_lt"),(0,s.kt)("td",{parentName:"tr",align:null},"The last transaction logical time")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"seed_block"),(0,s.kt)("td",{parentName:"tr",align:null},"Random number generator seed")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"debug"),(0,s.kt)("td",{parentName:"tr",align:null},"Should the TVM output debug information during its execution")))),(0,s.kt)("h2",{id:"transaction"},"Transaction"),(0,s.kt)("p",null,"Transaction is an object that describes the successful execution of\na message on the account.  If a message execution results in an error,\nsuch execution does not lead to a transaction creation.  After\ntransaction is  created, it gets  sealed into the block.  And after\nthe block  is negotiated  with fellow validators,  it find  its way\ninto   the   Masterchain.  From   that   point,   it  stays   there\nforever",(0,s.kt)("sup",{parentName:"p",id:"fnref-1"},(0,s.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),"."),(0,s.kt)("p",null,"Transaction is an  output of the Transaction Executor, so we  have to examine it\nmore closely."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Transaction {\n   pub account_addr: AccountId,\n   pub lt: u64,\n   pub prev_trans_hash: UInt256,\n   pub prev_trans_lt: u64,\n   pub now: u32,\n   pub outmsg_cnt: i16,\n   pub orig_status: AccountStatus,\n   pub end_status: AccountStatus,\n   pub in_msg: Option<ChildCell<Message>>,\n   pub out_msgs: OutMessages,\n   pub total_fees: CurrencyCollection,\n   pub state_update: ChildCell<HashUpdate>,\n   pub description: ChildCell<TransactionDescr>,\n}\n")),(0,s.kt)("h4",{id:"executeparams-fields-1"},"ExecuteParams fields"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"account_addr"),(0,s.kt)("td",{parentName:"tr",align:null},"Account identifier")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"lt"),(0,s.kt)("td",{parentName:"tr",align:null},"Transaction creation logical time")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"prev_trans_hash"),(0,s.kt)("td",{parentName:"tr",align:null},"Previous transaction hash value")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"prev_trans_lt"),(0,s.kt)("td",{parentName:"tr",align:null},"Previous transaction logical time")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"now"),(0,s.kt)("td",{parentName:"tr",align:null},"Current time in Unix Epoch")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"outmsg_cnt"),(0,s.kt)("td",{parentName:"tr",align:null},"Number of generated outbound messages")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"orig_status"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/arch/accounts#account-state"},"Account state")," upon receiving the message")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"end_status"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/arch/accounts#account-state"},"Account state")," after executing the message")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"in_msg"),(0,s.kt)("td",{parentName:"tr",align:null},"Processed message")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"out_msgs"),(0,s.kt)("td",{parentName:"tr",align:null},"Set of generated outbound messages")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"total_fees"),(0,s.kt)("td",{parentName:"tr",align:null},"Total fee amount for all the processing")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"state_update"),(0,s.kt)("td",{parentName:"tr",align:null},"Hash footprint of the account state change")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"description"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"#"},"Transaction Descriptor"))))),(0,s.kt)("h2",{id:"transaction-executor-1"},"Transaction Executor"),(0,s.kt)("p",null,"Transaction Executor module is responsible for applying the incoming message to the destination account, using the supplied parameters. In case of success, Transaction Executor outputs the newly created transaction and the updated account."),(0,s.kt)("p",null,"The main entry point is the function execute_with_libs_and_params() within transaction_executor.rs module. Other entry points were either flagged as deprecated, or reduce to calling this function after some minor parameters mangling."),(0,s.kt)("p",null,"The message execution is being done in several phases."),(0,s.kt)("p",null,"A phase is a logical step during the message execution. It may finish successfully or with an error. In case of an error, the next phase may not be executed. Phases are done mostly in a fixed order, but there are some nuances."),(0,s.kt)("p",null,"Let us warn you that the phase is not just an implementation detail of the Transaction Executor internals that may be easily discarded. Message execution phases are a part of EverScale smart-contracts programming architecture. It is assumed that you have a good grasp on it, to be able to do proper troubleshooting in case something is not working as expected. Without this knowledge, it may be challenging to debug the problem."),(0,s.kt)("p",null,"This document aims to support programmers in their strive for this knowledge."),(0,s.kt)("h4",{id:"transaction-executor-message-processing-general-scheme"},"Transaction executor message processing general scheme"),(0,s.kt)("img",{src:"https://www.plantuml.com/plantuml/png/LOzD2i8m48NtSuf7zu9UG51nMRhG2mp9M88sgVa1GNftcwPYNCsRB_FUJCBTs94z3nXPQsDxxBP4D_CGj182zq9hnMQFgsSRM4NZBD4pIH8qNOeOoaXem05TIwJOQvnVeb9q7cy25bBv5mZCBXjnyg9DhC1bjkNTrOWRnXJ5L-XG3lc1eqjM2IsaHEQZwwnLP_mN-6toGnLRP8PhT8P5PZZ_59Xe-W00",alt:null}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Credit")," \u2014 Message coins are put on the balance\nagent Storage."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Storage")," \u2014 Storage fee is deducted from the balance\nagent Computer."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Computer")," \u2014 The contract bytecode gets executed inside TVM with proper parameters. Contract generate Actions."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Action")," \u2014 Generated actions get executed by the action handler, producing outbound messages."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Bounce")," \u2014 Bounce phase is executed if failure happened on compute phase or action phase. It sends back the reply with coins, mostly."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Out messages")," \u2014 Queue get propagated to other validators.")),(0,s.kt)("h3",{id:"transaction-executor-types"},"Transaction Executor Types"),(0,s.kt)("p",null,"There are several type of messages in EverScale. Besides already mentioned ordinary messages, there are also a special type of messages that is a part of a wider protocol. For example, TickTock messages, SplitMerge messages, etc."),(0,s.kt)("p",null,"For each type of messages, there exists a separate Transaction Executor. In this work, we consider only the OrdinaryTransactionExecutor, that is defined in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/ton-labs-executor/blob/a28bde3e65dd35573d34e32aa4477d60162b5338/src/ordinary_transaction.rs"},"ordinary_transaction.rs"),"."),(0,s.kt)("h3",{id:"main-entry-point"},"Main Entry Point"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"fn execute_with_libs_and_params(\n    &self,\n    in_msg: Option<&Message>,\n    account_root: &mut Cell,\n    params: ExecuteParams,\n) -> Result<Transaction>\n")),(0,s.kt)("h4",{id:"executeparams-fields-2"},"ExecuteParams fields"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"self"),(0,s.kt)("td",{parentName:"tr",align:null},"Reference to the object calling the function")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"in_msg"),(0,s.kt)("td",{parentName:"tr",align:null},"Incoming message ",(0,s.kt)("a",{parentName:"td",href:"/arch/message"},"messages"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"account_root"),(0,s.kt)("td",{parentName:"tr",align:null},"Account record serialized in a form of Cells ",(0,s.kt)("a",{parentName:"td",href:"/arch/accounts"},"account"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"params"),(0,s.kt)("td",{parentName:"tr",align:null},"Transaction Executor parameters ",(0,s.kt)("a",{parentName:"td",href:"#parameters"},"parameters"))))),(0,s.kt)("p",null,"As a result, the function  returns either ",(0,s.kt)("inlineCode",{parentName:"p"},"Ok(Transaction)")," object or ",(0,s.kt)("inlineCode",{parentName:"p"},"Err")," value.  Please  note that  besides returning  the Transaction, there is a side-effect of  mutating the ",(0,s.kt)("inlineCode",{parentName:"p"},"account_root")," object. This justifies  our  generalization that  it  returns  two objects:  the transaction and the updated account record."),(0,s.kt)("h3",{id:"blockchainconfig-parameters"},"BlockchainConfig parameters"),(0,s.kt)("p",null,"Besides  ExecuteParams, the  Transaction Executor  relies on  BlockchainConfig parameters.  They are passed  implicitly, at the Transaction Executor creation time."),(0,s.kt)("p",null,"BlockchainConfig  is   a  set   of  globally   defined  parameters\nregulating  different nuances  of  blockchain  work. For  example,\nprices for smart-contract  execution, storage and a  set of system\ncontract addresses.  The latter  is needed  to let  Transaction Executor apply\nspecial logic for them."),(0,s.kt)("p",null,"Those parameters are global to the network, and negotiated between\nall the validators in advance. They are stored in a special system\nsmart-contract, in the Masterchain."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct BlockchainConfig {\n  gas_prices_mc: GasLimitsPrices,\n  gas_prices_wc: GasLimitsPrices,\n  fwd_prices_mc: MsgForwardPrices,\n  fwd_prices_wc: MsgForwardPrices,\n  storage_prices: AccStoragePrices,\n  special_contracts: FundamentalSmcAddresses,\n  capabilities: u64,\n  global_version: u32,\n  raw_config: ConfigParams,\n}\n")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_prices_mc"),(0,s.kt)("td",{parentName:"tr",align:null},"Fees for Masterchain smart-contract execution")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_prices_wc"),(0,s.kt)("td",{parentName:"tr",align:null},"Fees for Workchain smart-contract execution")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"fwd_prices_mc"),(0,s.kt)("td",{parentName:"tr",align:null},"Fees for delivering messages in Masterchain")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"fwd_prices_wc"),(0,s.kt)("td",{parentName:"tr",align:null},"Fees for delivering messages in Workchain")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"storage_prices"),(0,s.kt)("td",{parentName:"tr",align:null},"Fees for information storage")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"special_contracts"),(0,s.kt)("td",{parentName:"tr",align:null},"Set of system smart-contract addresses")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"capabilities"),(0,s.kt)("td",{parentName:"tr",align:null},"Set of operation-mode flags")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"global_version"),(0,s.kt)("td",{parentName:"tr",align:null},"Minimum blocks version number allowed to be included in the chain")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"raw_config"),(0,s.kt)("td",{parentName:"tr",align:null},"Dictionary with blockchain settings")))),(0,s.kt)("h3",{id:"code-execution-fee"},"Code Execution Fee"),(0,s.kt)("p",null,"As  in  most  of  blockchain,  in Everscale  the  execution  of  a\nsmart-contract costs money.  Usually, this fee is deduced from the\ncoins attached to  the message initiating the call,  but there are\nnuances."),(0,s.kt)("p",null,"The fee amount to be deducted from the balance is calculated based\non values found in ",(0,s.kt)("inlineCode",{parentName:"p"},"gas_price_mc"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"gas_price_wc"),"  structures. They\nare defined as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct GasLimitsPrices {\n  pub gas_price: u64,\n  pub gas_limit: u64,\n  pub special_gas_limit: u64,\n  pub gas_credit: u64,\n  pub block_gas_limit: u64,\n  pub freeze_due_limit: u64,\n  pub delete_due_limit: u64,\n  pub flat_gas_limit: u64,\n  pub flat_gas_price: u64,\n  pub max_gas_threshold: u128,\n}\n")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_price"),(0,s.kt)("td",{parentName:"tr",align:null},"Price of 1 unit of gas, expressed in Nano Evers")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_limit"),(0,s.kt)("td",{parentName:"tr",align:null},"Maximum gas amount for execution of a single message for an ordinary account")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"special_gas_limit"),(0,s.kt)("td",{parentName:"tr",align:null},"Maximum gas amount for execution of a single message for a system account")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_credit"),(0,s.kt)("td",{parentName:"tr",align:null},"Gas credited for an account to execute the external message")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"block_gas_limit"),(0,s.kt)("td",{parentName:"tr",align:null},"Maximum gas amount of the whole block")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"freeze_due_limit"),(0,s.kt)("td",{parentName:"tr",align:null},"Value of an account debt leading to account freeze")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"delete_due_limit"),(0,s.kt)("td",{parentName:"tr",align:null},"Value of an account debt leading to account removal")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"flat_gas_limit"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"flat_gas_price"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"max_gas_threshold"),(0,s.kt)("td",{parentName:"tr",align:null})))),(0,s.kt)("h3",{id:"message-passing-fee"},"Message Passing Fee"),(0,s.kt)("p",null,"Validators do  the work  of message  delivery. To  compensate their\nefforts,  account  pays  for  the message  passing.   The  message\npassing  fee depends  on BlockchainConfig  parameters ",(0,s.kt)("inlineCode",{parentName:"p"},"fwd_prices"),"\nand  the message  size.  The  ",(0,s.kt)("inlineCode",{parentName:"p"},"fwd_prices_mc")," and  ",(0,s.kt)("inlineCode",{parentName:"p"},"fwd_prices_wc"),"\nhave the following definition:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MsgForwardPrices {\n  pub lump_price: u64,\n  pub bit_price: u64,\n  pub cell_price: u64,\n  pub ihr_price_factor: u32,\n  pub first_frac: u16,\n  pub next_frac: u16,\n}\n")),(0,s.kt)("p",null,"The fee amount is calculated using the expression:"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mi",{parentName:"mrow"},"w"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"u"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"s")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"msg\\_fwd\\_fees = lump\\_price + bit\\_price \\times msg.bits + cell\\_price \\times msg.cells")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02691em"}},"w"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ees"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"bi"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"bi"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"ll"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"ll"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s")))))),(0,s.kt)("p",null,"Here, ",(0,s.kt)("inlineCode",{parentName:"p"},"msg.bits")," \u2014 bit-length of  the message body, ",(0,s.kt)("inlineCode",{parentName:"p"},"msg.cells")," is a total amount of cells that this message consists of."),(0,s.kt)("h3",{id:"data-storage-fee"},"Data Storage Fee"),(0,s.kt)("p",null,"In Everscale, account is charged a  fee for storing the data.  The\nfee amount is calculated using the formula:"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0394")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"fee = (cells * prices.cell\\_price + bits * prices.bit\\_price) * \\Delta")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ee"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"ll"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ces"),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"ll"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"bi"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.06em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ces"),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"bi"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u0394")))))),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0394")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Delta")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u0394")))))," \u2014  the time interval  between now and the  latest payment\nmoment, measured in  seconds. Here, we assume  that storage prices\nstay constant  during the ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0394")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Delta")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u0394")))))," interval. The storage fee gets\ncharged on each message processing ",(0,s.kt)("a",{parentName:"p",href:"#storage-phase"},"storage_phase"),"."),(0,s.kt)("p",null,"For  greater  flexibility,  the  storage  prices  may  be  changed\ndepending on  the current supply/demand  situation. It is  done by\nnegotiating new blockchain  config parameters ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"prices.cell\\_price")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ces"),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"ll"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"))))),"\nand ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"prices.bit\\_price")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ces"),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"bi"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce")))))," among  validators. After validators accept\nit,  new   parameters  are  written  in   the  Masterchain  config\nsmart-contract."),(0,s.kt)("p",null,"After the  change, previous price  parameters do no get  lost. The\nwhole history  of storage price  changes is stored in  the config.\nIt is done to provide precise  calculation of the storage fee that\ntake into  account all  the price changes  during the  interval of\ncalculation."),(0,s.kt)("h4",{id:"data-storage-fee-calculation"},"Data Storage Fee Calculation"),(0,s.kt)("p",null,"Here we describe the storage fee calculation expression in its generality."),(0,s.kt)("p",null,"Lets assume we have the following list of prices equipped\nwith a timestamp of a moment when the price change took place:"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mn",{parentName:"msub"},"0")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"N")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T = \\{ t_0, t_1, ..., t_N \\}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},"}")))))),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e8"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mn",{parentName:"msub"},"0")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mn",{parentName:"msub"},"0")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"N")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"N")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e9")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Pr = \\langle (pr_0, t_0), (pr_1, t_1), ..., (pr_N, t_N) \\rangle")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"\u27e8("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")\u27e9")))))),(0,s.kt)("p",null,"Here, ",(0,s.kt)("inlineCode",{parentName:"p"},"pr_0")," is reserved for the initial prices set in the genesis block of the blockchain, and ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mn",{parentName:"msub"},"0"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t_0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7651em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," is a timestamp of\nthose initial prices being set."),(0,s.kt)("p",null,"Let ",(0,s.kt)("inlineCode",{parentName:"p"},"now")," denote the current  timestamp, i.e. the moment of time when we want to calculate the storage fee, measured in Unix Epoch."),(0,s.kt)("p",null,"Its value is always greater or equal than the most recent price change timestamp."),(0,s.kt)("p",null,"Let ",(0,s.kt)("inlineCode",{parentName:"p"},"last_paid")," denote  the timestamp of  the latest  storage\npayment. If the payment didn't take place, ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"last\\_paid = 0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ai"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"))))),"."),(0,s.kt)("p",null,"To simplify  the calculation formula,  let us introduce a new list\n",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"r"),(0,s.kt)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Pr'")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))))))),", such that:"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"r"),(0,s.kt)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e8"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"k")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"k")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"N")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"N")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e9")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Pr' = \\langle (pr_k, t_k), ..., (pr_N, t_N) \\rangle")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"\u27e8("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03148em"}},"k")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03148em"}},"k")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")\u27e9")))))),(0,s.kt)("p",null,"where ",(0,s.kt)("inlineCode",{parentName:"p"},"t_k")," is the  least timestamp among values ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"N"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t_1 ... t_N")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7651em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," that is ",(0,s.kt)("inlineCode",{parentName:"p"},"greater"),"  than  ",(0,s.kt)("inlineCode",{parentName:"p"},"last_paid"),"."),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"k")),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mo",{parentName:"mrow"},"\u2208"),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow"},"\u2227"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mo",{parentName:"mrow"},">"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t_k = min \\{ t_i | t_i \\in T \\land t_i > last\\_paid \\}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7651em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03148em"}},"k")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"min"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u2223"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2208"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2227"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7651em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},">"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.06em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ai"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"}")))))),(0,s.kt)("p",null,"In  other words, the  values ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"k")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"N"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t_k, ..., t_N")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8095em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03148em"}},"k")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," form  a subset  of\n",(0,s.kt)("inlineCode",{parentName:"p"},"T")," where each  value is  strictly greater than ",(0,s.kt)("inlineCode",{parentName:"p"},"last_paid"),"."),(0,s.kt)("p",null,"We also add two more elements  from the left and the right:"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"r"),(0,s.kt)("mrow",{parentName:"msup"},(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"),(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"))),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e8"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"k")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e9"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c5"),(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"r"),(0,s.kt)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")),(0,s.kt)("mo",{parentName:"mrow"},"\u22c5"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e8"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"N")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"w"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e9")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Pr'' = \\langle (pr_k, last\\_paid) \\rangle \\cdot Pr' \\cdot \\langle (pr_N, now) \\rangle")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2032\u2032"))))))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.06em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"\u27e8("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03148em"}},"k")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ai"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")\u27e9"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u22c5"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7519em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u22c5"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"\u27e8("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3283em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02691em"}},"w"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")\u27e9")))))),(0,s.kt)("p",null,"Here, dot operator denotes lists concatenation operation."),(0,s.kt)("p",null,"We  use the following shortcuts: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("msubsup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msubsup"},"r"),(0,s.kt)("mi",{parentName:"msubsup"},"i"),(0,s.kt)("mrow",{parentName:"msubsup"},(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"),(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"pr_i = fst(Pr''_i)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0106em",verticalAlign:"-0.2587em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.4413em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2032\u2032"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2587em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," the first element  of a two-element tuple, and ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("msubsup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msubsup"},"r"),(0,s.kt)("mi",{parentName:"msubsup"},"i"),(0,s.kt)("mrow",{parentName:"msubsup"},(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"),(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t_i = snd(Pr''_i)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7651em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0106em",verticalAlign:"-0.2587em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.7519em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.4413em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2032\u2032"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2587em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),", the second element."),(0,s.kt)("p",null,"The total storage fee for the time interval is:"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msub"},"\u2211"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"1.."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"r"),(0,s.kt)("mrow",{parentName:"msup"},(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"),(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2032"))),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"))),(0,s.kt)("mrow",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"r"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"p"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"i")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"total\\_storage\\_fee = \\sum_{i=1..|Pr''|}{(cells * pr_{i}.cell\\_price + bits * pr_{i}.bits\\_price) * (t_i - t_{i-1})}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"or"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ee"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2247em",verticalAlign:"-0.4747em"}}),(0,s.kt)("span",{parentName:"span",className:"mop"},(0,s.kt)("span",{parentName:"span",className:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2253em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.4003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,s.kt)("span",{parentName:"span",className:"mrel mtight"},"="),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1..\u2223"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.6828em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.786em",marginRight:"0.0714em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2032\u2032"))))))))),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"\u2223"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4747em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"ll"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"ll"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"bi"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"bi"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2083em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,s.kt)("h4",{id:"data-storage-fee-calculation-algorithm"},"Data Storage Fee Calculation Algorithm"),(0,s.kt)("p",null,"For greater  convenience, besides  having the formula,  we provide\nthe pseudo-code for  the algorithm ",(0,s.kt)("inlineCode",{parentName:"p"},"calc_storage_fee"),", implemented\nin imperative fashion."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config")," \u2014 current blockchain configuration, has type ",(0,s.kt)("a",{parentName:"li",href:"#blockchainconfig-parameters"},"BlockchainConfig")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"storage_info")," \u2014 the account storage info struct, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts#account-storage"},"StorageInfo"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"is_masterchain")," \u2014 is the account inhabits Masterchain or not, has type Bool"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"now")," \u2014 current time, measured in Unix Epoch, has type UInt")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output")),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"fee \u2014 the fee amount to be deducted from the account balance, has type UInt"),(0,s.kt)("li",{parentName:"ul"},"storage_info \u2014 updated account storage info, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts#account-storage"},"StorageInfo"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def calc_storage_fee(config, storage_info, is_masterchain, now):\n    cells = storage_info.used.cells\n    bits = storage_info.used.bits\n    last_paid = storage_info.last_paid\n    prices = config.storage_prices   # see AccStoragePrices\n  \n    assert len(prices) > 0\n  \n    if now <= last_paid or last_paid == 0 or now <= prices[0].utime_since:\n        return 0\n  \n    fee = 0\n  \n    # calculate the fee according to prices that were actual\n    # during the specific period of time\n    for i in len(prices):\n        cur_price = prices[i]\n        if i < len(prices) - 1:\n            end = prices[i + 1].utime_since\n        else:\n            end = now_time\n  \n        if end >= last_paid:\n            delta = end - max(cur_price.utime_since, last_paid)\n            if is_masterchain:\n                fee += (cells * cur_price.mc_cell_prices_ps + \\\n                    bits * cur_price.mc_bit_price_ps) * delta\n            else:\n                fee += (cells * cur_price.cell_price_ps + \\\n                    bits * cur_price.bit_price_ps) * delta\n  \n    storage_info.last_paid = end\n  \n    return (fee, storage_info)\n")),(0,s.kt)("h3",{id:"special-smart-contracts"},"Special Smart-Contracts"),(0,s.kt)("p",null,"In Everscale blockchain, there is  a set of  smart-contracts that have a  distinguished status in  the system. For  those contracts, validators are obligated  to process their execution in a special priveledged  manner. Such  smart-contracts are called ",(0,s.kt)("inlineCode",{parentName:"p"},"special")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"system"),". Accounts storing those contracts are called the same."),(0,s.kt)("p",null,"Special smart-contracts enjoy the following privilege:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"No fee gets deducted for the code execution"),(0,s.kt)("li",{parentName:"ul"},"No fee gets deducted for the storage use"),(0,s.kt)("li",{parentName:"ul"},"No fee gets deducted for message passing"),(0,s.kt)("li",{parentName:"ul"},"It has a special maximum gas limit, see ",(0,s.kt)("inlineCode",{parentName:"li"},"GasLimitsPrices.special_gas_limit")),(0,s.kt)("li",{parentName:"ul"},"Allowed to process ",(0,s.kt)("inlineCode",{parentName:"li"},"TickTock")," timer messages")),(0,s.kt)("p",null,"Upon executing a  message for one of those  special contracts, the Transaction Executor has to apply all those conditions."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"In this document, we mainly focus on ordinary accounts, leaving the special accounts processing details aside.")),(0,s.kt)("h3",{id:"globalcapabilities-options"},"GlobalCapabilities Options"),(0,s.kt)("p",null,"There  are  several  flags   defining  different  aspects  of  the blockchain   node   operation   mode.    They   are   defined   in GlobalCapabilities enumeration."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapCreateStatsEnabled"),(0,s.kt)("td",{parentName:"tr",align:null},"Allow update block statistics. Not related to Transaction Executor.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapBounceMsgBody"),(0,s.kt)("td",{parentName:"tr",align:null},"Include the first 256 bits of the original message in the bounce message body.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapReportVersion"),(0,s.kt)("td",{parentName:"tr",align:null},"Include the blockchain version info into the block.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapShortDequeue"),(0,s.kt)("td",{parentName:"tr",align:null},"Some special mode of managing outbound messages by the Validator. Not related to Transaction Executor")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapFastStorageStat"),(0,s.kt)("td",{parentName:"tr",align:null},"Use alternative algorithm to update the structs AccountsStat.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapInitCodeHash"),(0,s.kt)("td",{parentName:"tr",align:null},"Use the field init_code_hash in the AccountState.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapOffHypercube"),(0,s.kt)("td",{parentName:"tr",align:null},"Turn off Hypercube routing algorithm for message delivery")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapMycode"),(0,s.kt)("td",{parentName:"tr",align:null},"Provide the virtual machine with the code of a smart-contract being executed.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapMbppEnabled"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapIhrEnabled"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"CapSplitMergeTransactions"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")))),(0,s.kt)("h3",{id:"rawconfig-options"},"RawConfig options"),(0,s.kt)("p",null,"Besides already  mentioned options, there  are yet another  set of options residing in the ",(0,s.kt)("inlineCode",{parentName:"p"},"BlockchainConfig.raw_config"),". This field has the following structure:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct ConfigParams {\n  pub config_addr: UInt256,\n  pub config_params: HashmapE // <u32, SliceData>\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config_addr")," \u2014 is the configuration smart-contract account identifier (the workchain identifier equals - 1);"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config_params")," \u2014 dictionary with parameters, dictionary keys refers to an option number. We will not go deep into those options, because they are not relevant to our work.")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/ton-labs-block/blob/4b34a73619b53ebda37f3cb6cc44d26925053219/src/config_params.rs#L38"},"ton-labs-block/src/config_params.rs")," for further investigation."),(0,s.kt)("h3",{id:"error-code-enumeration"},"Error Code Enumeration"),(0,s.kt)("p",null,"When Transaction Executor encounters an error during message processing, it returns a special answer to the calling side. The answer contains an error code. Here we list possible error codes and their short description. In our further discussion, we rely on those mnemonic names."),(0,s.kt)("h3",{id:"error-code-enumeration-1"},"Error Code Enumeration"),(0,s.kt)("p",null,"When Transaction Executor encounters an error during message processing, it returns a special answer to the calling side. The answer contains an error code. Here we list possible error codes and their short description. In our further discussion, we rely on those mnemonic names."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Error Mnemonic Name"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"InvalidExtMessage"),(0,s.kt)("td",{parentName:"tr",align:null},"Incorrect format of an incoming external message")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"TrExecutorError(e)"),(0,s.kt)("td",{parentName:"tr",align:null},"Wide range of errors during message processing")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"TvmExceptionCode(e)"),(0,s.kt)("td",{parentName:"tr",align:null},"TVM produced exception e during byte-code execution")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"NoAcceptError"),(0,s.kt)("td",{parentName:"tr",align:null},"The smart-contract did not accept external message")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"NoFundsToImportMsg"),(0,s.kt)("td",{parentName:"tr",align:null},"Not enough funds to process external message")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ExtMsgComputeSkipped(r)"),(0,s.kt)("td",{parentName:"tr",align:null},"During the external message processing, the Compute phase was skipped with the reason r")))),(0,s.kt)("h3",{id:"account-state-update"},"Account State Update"),(0,s.kt)("p",null,"In the transaction object, there is a special field reflecting the change of the account state, the ",(0,s.kt)("inlineCode",{parentName:"p"},"state_update")," field of type ",(0,s.kt)("inlineCode",{parentName:"p"},"HashUpdate"),"."),(0,s.kt)("p",null,"The type is defined as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct HashUpdate {\n  pub old_hash: UInt256,\n  pub new_hash: UInt256,\n}\n")),(0,s.kt)("p",null,"Here ",(0,s.kt)("inlineCode",{parentName:"p"},"old_hash")," refers to a hash value taken from the initial account state, before message processing; the ",(0,s.kt)("inlineCode",{parentName:"p"},"new_hash")," is a hash taken from the updated account state, after successful message processing."),(0,s.kt)("h3",{id:"transaction-description-object"},"Transaction Description Object"),(0,s.kt)("p",null,"During the incoming message processing, Transaction Executor constructs the report about the processing. This report has a special name \u2014 Transaction Description,\nand defined by the following structure:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TransactionDescrOrdinary {\n  pub credit_first: bool,\n  pub storage_ph: Option<TrStoragePhase>,\n  pub credit_ph: Option<TrCreditPhase>,\n  pub compute_ph: TrComputePhase,\n  pub action: Option<TrActionPhase>,\n  pub aborted: bool,\n  pub bounce: Option<TrBouncePhase>,\n  pub destroyed: bool\n}\n")),(0,s.kt)("p",null,"This description object may be used for fast checkups on the main system invariants, critical for its safety, during runtime."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"storage_ph"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"#storage-phase-descriptor"},"Storage phase descriptor"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"credit_ph"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"#credit-phase-descriptor"},"Credit phase descriptor"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"compute_ph"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"#compute-phase-descriptor"},"Compute phase descriptor"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"action"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"#action-phase-descriptor"},"Action phase descriptor"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"bounce"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"#bounce-phase-transaction-descriptor"},"Bounce phase descriptor"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"credit_first"),(0,s.kt)("td",{parentName:"tr",align:null},"Credit phase was executed before Storage phase")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"aborted"),(0,s.kt)("td",{parentName:"tr",align:null},"Is Action phase failed")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"destroyed"),(0,s.kt)("td",{parentName:"tr",align:null},"Is account ",(0,s.kt)("inlineCode",{parentName:"td"},"deleted"),"  after message execution")))),(0,s.kt)("p",null,"We now describe each descriptor separately."),(0,s.kt)("h4",{id:"storage-phase-descriptor"},"Storage Phase Descriptor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TrStoragePhase {\n  pub storage_fees_collected: Grams,\n  pub storage_fees_due: Option<Grams>,\n  pub status_change: AccStatusChange\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"storage_fees_collected")," denotes the amount of tokens deducted from the account balance to cover the storage fee."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"storage_fees_due")," denotes the debt value, if there is any. Otherwise, this value equals ",(0,s.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"status_change")," denotes the possible account status change. It may\nhave been the case that the status were frozen or deleted due to\nhaving a significant debt value. Possible values are:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum AccStatusChange {\n  Unchanged,\n  Frozen,\n  Deleted,\n}\n")),(0,s.kt)("h4",{id:"credit-phase-descriptor"},"Credit Phase Descriptor"),(0,s.kt)("p",null,"The Credit Phase descriptor is defined as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TrCreditPhase {\n  pub due_fees_collected: Option<Grams>,\n  pub credit: CurrencyCollection,\n}\n")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"due_fees_collected")),(0,s.kt)("td",{parentName:"tr",align:null},"Amount of coins deducted from the message balance to cover the debt of the account, if any existed at the ",(0,s.kt)("em",{parentName:"td"},"beginning of the credit phase"),". If there were no debt, the value is ",(0,s.kt)("inlineCode",{parentName:"td"},"None")," .")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"credit")),(0,s.kt)("td",{parentName:"tr",align:null},"Message value after the fees were conducted from it.")))),(0,s.kt)("h4",{id:"compute-phase-descriptor"},"Compute Phase Descriptor"),(0,s.kt)("p",null,"Compute Phase descriptor is defined with the following enumeration:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum TrComputePhase {\n  Skipped(TrComputePhaseSkipped),\n  Vm(TrComputePhaseVm)\n}\n")),(0,s.kt)("h5",{id:"choice-1-skipped"},"Choice 1. Skipped"),(0,s.kt)("p",null,"If the Compute phase was not successfully performed, the descriptor value is ",(0,s.kt)("inlineCode",{parentName:"p"},"Skipped"),"\nin this case. It should have an argument with following type:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TrComputePhaseSkipped {\n  pub reason: ComputeSkipReason\n}\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"reason")," has to be one of the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum ComputeSkipReason {\n  NoState,\n  BadState,\n  NoGas,\n}\n")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"NoState"),(0,s.kt)("td",{parentName:"tr",align:null},"Caused by the following conditions: 1) The account did not exist by the time of message arrival, and the incoming message did not contain the ",(0,s.kt)("inlineCode",{parentName:"td"},"StateInit")," part; 2) The account was not initialized and the incoming message did not contain the ",(0,s.kt)("inlineCode",{parentName:"td"},"StateInit"),"  part.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"NoState"),(0,s.kt)("td",{parentName:"tr",align:null},"Caused by the following conditions: 1) The account did not exist by the time of message arrival, and the incoming message did not contain the ",(0,s.kt)("inlineCode",{parentName:"td"},"StateInit")," part; 2) The account was not initialized and the incoming message did not contain the ",(0,s.kt)("inlineCode",{parentName:"td"},"StateInit"),"  part.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"BadState"),(0,s.kt)("td",{parentName:"tr",align:null},"Caused by the following conditions: 1) The account was in ",(0,s.kt)("inlineCode",{parentName:"td"},"AccStateUninit")," state, the message did contain the ",(0,s.kt)("inlineCode",{parentName:"td"},"StateInit")," part, but an attempt to initialize the account with the given ",(0,s.kt)("inlineCode",{parentName:"td"},"StateInit")," failed due to being inconsistent with the account; 2) The account was in ",(0,s.kt)("inlineCode",{parentName:"td"},"AccStateFrozen")," state, the message contained the ",(0,s.kt)("inlineCode",{parentName:"td"},"StateInit")," part, but an attempt to unfreeze the account with the given state init failed due to being inconsistent with the account.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"NoGas"),(0,s.kt)("td",{parentName:"tr",align:null},"Caused by the following conditions: 1) After Credit and Storage phases, the account balance had no coins: its balance equals zero; 2) Values ",(0,s.kt)("inlineCode",{parentName:"td"},"gas_limit")," and ",(0,s.kt)("inlineCode",{parentName:"td"},"gas_credit"),", calculated with the ",(0,s.kt)("a",{parentName:"td",href:"#initial-gas-algorithm"},"init_gas")," algorithm, both equals 0.")))),(0,s.kt)("h5",{id:"choice-2-successful-computation"},"Choice 2. Successful computation"),(0,s.kt)("p",null,"Successful Compute phase result is defined by the following ",(0,s.kt)("inlineCode",{parentName:"p"},"TrComputePhaseVm"),"  structure:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TrComputePhaseVm {\n  pub success: bool,\n  pub msg_state_used: bool,\n  pub account_activated: bool,\n  pub gas_fees: Grams,\n  pub gas_used: VarUInteger7,\n  pub gas_limit: VarUInteger7,\n  pub gas_credit: Option<VarUInteger3>,\n  pub mode: i8,\n  pub exit_code: i32,\n  pub exit_arg: Option<i32>,\n  pub vm_steps: u32,\n  pub vm_init_state_hash: UInt256,\n  pub vm_final_state_hash: UInt256\n}\n")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"success"),(0,s.kt)("td",{parentName:"tr",align:null},"Compute phase completion status. See ",(0,s.kt)("a",{parentName:"td",href:"#compute-phase-success-conditions"},"compute_phase_success"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_fees"),(0,s.kt)("td",{parentName:"tr",align:null},"Fees for the gas used by a smart-contract execution, ",(0,s.kt)("a",{parentName:"td",href:"#calculate-gas-fee-algorithm"},"see here"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_used"),(0,s.kt)("td",{parentName:"tr",align:null},"An exact amount of gas used by the VM during the execution")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_limit"),(0,s.kt)("td",{parentName:"tr",align:null},"A strict upper bound on the amount of gas allowed for this account ",(0,s.kt)("a",{parentName:"td",href:"#initial-gas-algorithm"},"init_gas"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"gas_credit"),(0,s.kt)("td",{parentName:"tr",align:null},"An amount of gas credited to be used for external messages before being accepted ",(0,s.kt)("a",{parentName:"td",href:"#initial-gas-algorithm"},"init_gas"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"vm_steps"),(0,s.kt)("td",{parentName:"tr",align:null},"Number of steps performed by the VM")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"exit_code"),(0,s.kt)("td",{parentName:"tr",align:null},"Computation exit code, see ",(0,s.kt)("a",{parentName:"td",href:"#compute-phase-exit-code"},"compute_phase_exitcode"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"exit_arg"),(0,s.kt)("td",{parentName:"tr",align:null},"Computation exit argument, see ",(0,s.kt)("a",{parentName:"td",href:"#compute-phase-exit-code"},"compute_phase_exitcode"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"mode"),(0,s.kt)("td",{parentName:"tr",align:null},"Always equals 0")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"vm_init_state_hash"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"vm_final_state_hash"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"msg_stated_used"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"account_activated"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")))),(0,s.kt)("h4",{id:"action-phase-descriptor"},"Action Phase Descriptor"),(0,s.kt)("p",null,"Action Phase descriptor is defined as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TrActionPhase {\n  pub success: bool,\n  pub valid: bool,\n  pub no_funds: bool,\n  pub status_change: AccStatusChange,\n  pub total_fwd_fees: Option<Grams>,\n  pub total_action_fees: Option<Grams>,\n  pub result_code: i32,\n  pub result_arg: Option<i32>,\n  pub tot_actions: i16,\n  pub spec_actions: i16,\n  pub skipped_actions: i16,\n  pub msgs_created: i16,\n  pub action_list_hash: UInt256,\n  pub tot_msg_size: StorageUsedShort,\n}\n")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"success"),(0,s.kt)("td",{parentName:"tr",align:null},"Action phase completed successfully. The success condition is described ",(0,s.kt)("a",{parentName:"td",href:"#action-phase-success-condition"},"here"),".")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"valid"),(0,s.kt)("td",{parentName:"tr",align:null},"Action phase is valid. The validity condition is described ",(0,s.kt)("a",{parentName:"td",href:"#action-phase-validity-condition"},"here"),".")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"result_code"),(0,s.kt)("td",{parentName:"tr",align:null},"Action phase failed with the result code, see ",(0,s.kt)("a",{parentName:"td",href:"#action-result-codes"},"action_result_codes"),". In case of success, the value equals to 0")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"result_arg"),(0,s.kt)("td",{parentName:"tr",align:null},"In case of an error, the item number of an action in the action list that caused the error")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"no_funds"),(0,s.kt)("td",{parentName:"tr",align:null},"True if the error was caused by a balance insufficiency")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"status_change"),(0,s.kt)("td",{parentName:"tr",align:null},"Equals AccStatusChange::Deleted in case of the account being deleted after processing actions")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"total_fwd_fees"),(0,s.kt)("td",{parentName:"tr",align:null},"Total fees for the SendMsg actions processing")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"total_action_fees"),(0,s.kt)("td",{parentName:"tr",align:null},"Total fees for the whole action list processing")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"tot_actions"),(0,s.kt)("td",{parentName:"tr",align:null},"Total number of actions in the action list at a beginning of the Action phase")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"spec_actions"),(0,s.kt)("td",{parentName:"tr",align:null},"Number of special actions, i.e. Reserve, SetCode, SetLib")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"msg_created"),(0,s.kt)("td",{parentName:"tr",align:null},"Number of successful SendMsg actions")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"action_list_hash"),(0,s.kt)("td",{parentName:"tr",align:null},"Hash of action list calculated at a beginning of the Action phase")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"tot_msg_size"),(0,s.kt)("td",{parentName:"tr",align:null},"Total size of all the generated messages")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"skipped_actions"),(0,s.kt)("td",{parentName:"tr",align:null},"Not used")))),(0,s.kt)("h4",{id:"action-result-codes"},"Action Result Codes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Result Code"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_ACTIONLIST_INVALID"),(0,s.kt)("td",{parentName:"tr",align:null},"Message serialization error")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_TOO_MANY_ACTIONS"),(0,s.kt)("td",{parentName:"tr",align:null},"Contract generated more actions than allowed. Maximum actions count is 255")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_UNKNOWN_OR_INVALID_ACTION"),(0,s.kt)("td",{parentName:"tr",align:null},"Binary serialization error, or invalid flags. See ",(0,s.kt)("a",{parentName:"td",href:"#remarks"},"remarks"),".")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_INCORRECT_SRC_ADDRESS"),(0,s.kt)("td",{parentName:"tr",align:null},"Wide source address ",(0,s.kt)("a",{parentName:"td",href:"/arch/accounts#account-address"},"address"),", or the source address does not equal to the account address")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_INCORRECT_DST_ADDRESS"),(0,s.kt)("td",{parentName:"tr",align:null},"Incorrect destination address, or destination workchain is not allowed to receive messages, or destination workchain does not exist")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_ANYCAST"),(0,s.kt)("td",{parentName:"tr",align:null},"Destination address of type Anycast. It is no longer supported and considered an error.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_NOT_ENOUGH_GRAMS"),(0,s.kt)("td",{parentName:"tr",align:null},"Insufficient balance. See ",(0,s.kt)("a",{parentName:"td",href:"#remarks"},"remarks"),".")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_NOT_ENOUGH_EXTRA"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"#multicurrency-payments"},"Extra-tokens")," balance is insufficient to execute to action")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_INVALID_BALANCE"),(0,s.kt)("td",{parentName:"tr",align:null},"Reserve action lead to an error, or outgoing message is too big to process")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_BAD_ACCOUNT_STATE"),(0,s.kt)("td",{parentName:"tr",align:null},"Actions SetCode or ChangeLib lead to an error")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"RESULT_CODE_UNSUPPORTED"),(0,s.kt)("td",{parentName:"tr",align:null},"SendMsg action has incorrect flags set")))),(0,s.kt)("h5",{id:"remarks"},"Remarks:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"RESULT_CODE_UNKNOWN_OR_INVALID_ACTION"),"  reasons are:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Actions serialization error"),(0,s.kt)("li",{parentName:"ul"},"SendMsg action has invalid flags, that is:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"The mutually exclusive flags are set: ",(0,s.kt)("inlineCode",{parentName:"li"},"SENDMSG_REMAINING_MSG_BALANCE")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"SENDMSG_ALL_BALANCE")),(0,s.kt)("li",{parentName:"ul"},"Message was sent with an unknown flag ",(0,s.kt)("a",{parentName:"li",href:"#action-sendmsg"},"sendmsg_flags"),";"),(0,s.kt)("li",{parentName:"ul"},"The flag ",(0,s.kt)("inlineCode",{parentName:"li"},"SENDMSG_DELETE_IF_EMPTY")," is set, but the flag ",(0,s.kt)("inlineCode",{parentName:"li"},"SENDMSG_ALL_BALANCE"),"  isn't;"))),(0,s.kt)("li",{parentName:"ul"},"Reserve action has invalid flags",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Unknown flag is set"),(0,s.kt)("li",{parentName:"ul"},"Flag ",(0,s.kt)("inlineCode",{parentName:"li"},"RESERVE_PLUS_ORIG")," is set, but ",(0,s.kt)("inlineCode",{parentName:"li"},"RESERVE_REVERSE"),"  isn't")))),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"RESULT_CODE_NOT_ENOUGH_GRAMS"),"  reasons are:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"For SendMsg action, the flag ",(0,s.kt)("inlineCode",{parentName:"li"},"SENDMSG_REMAINING_MSG_BALANCE")," is set, but ",(0,s.kt)("inlineCode",{parentName:"li"},"SENDMSG_PAY_FEE_SEPARATELY"),"  isn't"),(0,s.kt)("li",{parentName:"ul"},"Message balance is insufficient to cover message delivery fees"),(0,s.kt)("li",{parentName:"ul"},"Account balance is insufficient to cover all message delivery fees")),(0,s.kt)("h4",{id:"bounce-phase-transaction-descriptor"},"Bounce Phase Transaction Descriptor"),(0,s.kt)("p",null,"Bounce Phase descriptor is defined with the following enumeration:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum TrBouncePhase {\n  Negfunds,\n  Nofunds(TrBouncePhaseNofunds),\n  Ok(TrBouncePhaseOk),\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Negfunds")," choice is not used."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Nofunds(TrBouncePhaseNofunds)")," denotes the insufficiency of account balance, details are put into the parameter value"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Ok(TrBouncePhaseOk)")," denotes success, i.e. that the bounce message has been formed and put into the Msg queue. Details of the phase are put into the parameter value.")),(0,s.kt)("h5",{id:"choice-1-nofunds"},"Choice 1. Nofunds"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TrBouncePhaseNofunds {\n  pub msg_size: StorageUsedShort,\n  pub req_fwd_fees: Grams,\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_size"),"  denotes the size of generated bounce message. This value is not used."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"req_fwd_fees"),"  denotes the fee for the message delivery.")),(0,s.kt)("h5",{id:"choice-2-oktrbouncephaseok"},"Choice 2. Ok(TrBouncePhaseOk)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TrBouncePhaseOk {\n  pub msg_size: StorageUsedShort,\n  pub msg_fees: Grams,\n  pub fwd_fees: Grams,\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_size"),"  not used."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"fwd_fees"),"  is a full forwarding fee for the bounce message."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_fees")," is a part of ",(0,s.kt)("inlineCode",{parentName:"li"},"fwd_fees"),"  that goes to the validator processing the message.")),(0,s.kt)("h2",{id:"actions"},"Actions"),(0,s.kt)("p",null,"After successfully executing a  smart-contract code, the TVM virtual\nmachine provides  the executor  with updated  contract state  and a\nlist of actions to be further processed."),(0,s.kt)("p",null,"In our  context, an action refers  to an order for  the Transaction Executor to\nperform  a  distinguished  stateful  act. It  could  be  sending  a\nmessage, changing  the smart-contract's code or  reserving coins on\nthe balance."),(0,s.kt)("h3",{id:"type-of-actions"},"Type of Actions"),(0,s.kt)("p",null,"Here we provide a set of possible actions, with the description. We\ngo deep on each of them further."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum OutAction {\n  None, // default value\n  SendMsg {\n    mode: u8,\n    out_msg: Message,\n  },\n  SetCode {\n    new_code: Cell,\n  },\n  ReserveCurrency {\n    mode: u8,\n    value: CurrencyCollection,\n  },\n  ChangeLibrary {\n    mode: u8,\n    code: Option<Cell>,\n    hash: Option<UInt256>,\n  }\n}\n")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Action"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SendMsg")),(0,s.kt)("td",{parentName:"tr",align:null},"Send the message out_msg to some account using the provided mode")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"ReserveCurrency")),(0,s.kt)("td",{parentName:"tr",align:null},"Manage the account's balance to guarantee its sufficiency")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SetCode")),(0,s.kt)("td",{parentName:"tr",align:null},"Change the contract byte-code with the given new_code")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"ChangeLibrary")),(0,s.kt)("td",{parentName:"tr",align:null},"Update code library")))),(0,s.kt)("h3",{id:"action-sendmsg"},"Action SendMsg"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"S"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mi",{parentName:"mrow"},"M"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"u"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"t"),(0,s.kt)("mi",{parentName:"msub"},"m")),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"SendMsg(mode,out_msg)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," action sends a message to an account. The message ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"u"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"g")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"out\\_msg")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9251em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g")))))," contains\nthe destination address as well as the payload to be delivered."),(0,s.kt)("p",null,"This action has a lot of  modes that can be combined using logical\n",(0,s.kt)("inlineCode",{parentName:"p"},"OR"),"  operator. Some mode combinations are prohibited. See ",(0,s.kt)("a",{parentName:"p",href:"#remarks"},"rc_remarks"),"."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Mode"),(0,s.kt)("th",{parentName:"tr",align:null},"Value"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SENDMSG_ORDINARY")),(0,s.kt)("td",{parentName:"tr",align:null},"0"),(0,s.kt)("td",{parentName:"tr",align:null},"Send the message. Without other modes, the forwarding fee for the delivery is paid by the receiver.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SENDMSG_PAY_FEE_SEPARATELY")),(0,s.kt)("td",{parentName:"tr",align:null},"1"),(0,s.kt)("td",{parentName:"tr",align:null},"Send the message. The forwarding fee is paid by the sender.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SENDMSG_IGNORE_ERROR")),(0,s.kt)("td",{parentName:"tr",align:null},"2"),(0,s.kt)("td",{parentName:"tr",align:null},"If an error occurs during the processing of this action, ignore it.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SENDMSG_DELETE_IF_EMPTY")),(0,s.kt)("td",{parentName:"tr",align:null},"32"),(0,s.kt)("td",{parentName:"tr",align:null},"The account gets deleted if, after the action processed, the balance becomes zero")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SENDMSG_REMAINING_MSG_BALANCE")),(0,s.kt)("td",{parentName:"tr",align:null},"64"),(0,s.kt)("td",{parentName:"tr",align:null},"The message should carry all the remaining value of the inbound message additionally to the value specified in the field")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"SENDMSG_ALL_BALANCE")),(0,s.kt)("td",{parentName:"tr",align:null},"128"),(0,s.kt)("td",{parentName:"tr",align:null},"The message should carry all the remaining balance of the account, instead of the value specified in the value field")))),(0,s.kt)("h3",{id:"action-reservecurrency"},"Action ReserveCurrency"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"R"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"C"),(0,s.kt)("mi",{parentName:"mrow"},"u"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"y"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"ReserveCurrency(mode, val)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"eser"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"rre"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"cy"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," action makes a coin reserve on the balance. This action has several modes of operation.\nModes can be combined."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Mode"),(0,s.kt)("th",{parentName:"tr",align:null},"Value"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"RESERVE_EXACTLY")),(0,s.kt)("td",{parentName:"tr",align:null},"0"),(0,s.kt)("td",{parentName:"tr",align:null},"Reserve exactly ",(0,s.kt)("span",{parentName:"td",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"val")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l")))))," coins")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"RESERVE_ALL_BUT")),(0,s.kt)("td",{parentName:"tr",align:null},"1"),(0,s.kt)("td",{parentName:"tr",align:null},"Reserve ",(0,s.kt)("span",{parentName:"td",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"acc\\_balance - val")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"cc"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ba"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"an"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l")))))," coins, where ",(0,s.kt)("span",{parentName:"td",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"acc\\_balance")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"cc"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ba"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"an"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce")))))," is a remaining balance of the account")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"RESERVE_IGNORE_ERROR")),(0,s.kt)("td",{parentName:"tr",align:null},"2"),(0,s.kt)("td",{parentName:"tr",align:null},"Skip the action on failure")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"RESERVE_PLUS_ORIG")),(0,s.kt)("td",{parentName:"tr",align:null},"4"),(0,s.kt)("td",{parentName:"tr",align:null},"Reserve ",(0,s.kt)("span",{parentName:"td",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"acc\\_balance + val")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0044em",verticalAlign:"-0.31em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"cc"),(0,s.kt)("span",{parentName:"span",className:"mord",style:{marginRight:"0.02778em"}},"_"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ba"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"an"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"ce"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l")))))," coins. It should be used only with RESERVE_REVERSE.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"RESERVE_REVERSE")),(0,s.kt)("td",{parentName:"tr",align:null},"8"),(0,s.kt)("td",{parentName:"tr",align:null},"Reverse value of ",(0,s.kt)("span",{parentName:"td",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"val")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l")))))," in the calculation of the reserve, i.e. substitute ",(0,s.kt)("span",{parentName:"td",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"val")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l")))))," with ",(0,s.kt)("span",{parentName:"td",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mi",{parentName:"mrow"},"v"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"l")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"-val")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"))))))))),(0,s.kt)("h3",{id:"action-setcode"},"Action SetCode"),(0,s.kt)("p",null,"Currently, we skip this action."),(0,s.kt)("h2",{id:"message-processing-algorithm"},"Message Processing Algorithm"),(0,s.kt)("p",null,"In this section, we present a pseudo-code for incoming message processing algorithm."),(0,s.kt)("p",null,"The algorithm is divided in two mutually exclusive parts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ExecuteInternalMessage")," \u2014 internal message execution ",(0,s.kt)("a",{parentName:"li",href:"#internal-message-processing-algorithm"},"internal_message_processing")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ExecuteExternalMessage")," \u2014 external message execution ",(0,s.kt)("a",{parentName:"li",href:"#external-message-processing-algorithm"},"external_message_processing"))),(0,s.kt)("p",null,"Both algorithms rely on executing some or all of the phases:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Credit phase ",(0,s.kt)("a",{parentName:"li",href:"#credit-phase"},"credit_phase")),(0,s.kt)("li",{parentName:"ul"},"Storage phase ",(0,s.kt)("a",{parentName:"li",href:"#storage-phase"},"storage_phase")),(0,s.kt)("li",{parentName:"ul"},"Compute phase ",(0,s.kt)("a",{parentName:"li",href:"#compute-phase"},"compute_phase")),(0,s.kt)("li",{parentName:"ul"},"Action phase ",(0,s.kt)("a",{parentName:"li",href:"#action-phase"},"action_phase")),(0,s.kt)("li",{parentName:"ul"},"Bounce phase ",(0,s.kt)("a",{parentName:"li",href:"#bounce-phase"},"bounce_phase"))),(0,s.kt)("p",null,"Please  note that  we consider  only ",(0,s.kt)("inlineCode",{parentName:"p"},"ordinary"),"   accounts here. The algorithm  for  executing  messages   on  special  accounts  is  not considered."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"in_msg")," \u2014 incoming message, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"params")," \u2014 executor parameters, has type ",(0,s.kt)("a",{parentName:"li",href:"#parameters"},"Parameters")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config")," \u2014 blockchain configuration, has type ",(0,s.kt)("a",{parentName:"li",href:"#blockchainconfig-parameters"},"BlockchainConfig"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("p",null,"On success, returns ",(0,s.kt)("em",{parentName:"p"},"Ok(acc1, trans)"),", such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc1")," \u2014 updated account, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"trans")," \u2014 transaction, has type ",(0,s.kt)("a",{parentName:"li",href:"#transaction"},"Transaction"))),(0,s.kt)("p",null,"On error, returns error of the type ",(0,s.kt)("inlineCode",{parentName:"p"},"ExecutorError")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Modifies:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def ExecuteMessage(in_msg, account, params, config):\nif in_msg.header is ExtOutMsgInfo:\nreturn ExecutorError.InvalidExtMessage\nif in_msg.header.dst == None:\nreturn ExecutorError.TrExecutorError()\nif in_msg.header is ExtInMessageHeader and account.balance == 0:\nreturn ExecutorError.NoFundsToImportMsg()\n\n      acc = account.clone()\n\n      if in_msg.header is ExtInMsgInfo:\n          return ExecuteExternalMessage(in_msg, acc, params, config)\n      elif in_msg.header is IntMsgInfo:\n          return ExecuteInternalMessage(in_msg, acc, params, config)\n\n      return ExecutorError.TrExecutorError()\n")),(0,s.kt)("h2",{id:"internal-message-processing-algorithm"},"Internal Message Processing Algorithm"),(0,s.kt)("p",null,"At this point, the message is known to be internal. Execute it with the given account."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"in_msg")," \u2014 incoming message, has type  ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"params")," \u2014 executor parameters, has type ",(0,s.kt)("a",{parentName:"li",href:"#parameters"},"Parameters")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config")," \u2014 blockchain configuration, has type ",(0,s.kt)("a",{parentName:"li",href:"#blockchainconfig-parameters"},"BlockchainConfig"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("p",null,"On success, returns ",(0,s.kt)("em",{parentName:"p"},"Ok(acc1, trans)"),", such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc1")," \u2014 updated account, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"trans")," \u2014 transaction, has type ",(0,s.kt)("a",{parentName:"li",href:"#transaction"},"Transaction")," On error, returns error of the type ",(0,s.kt)("em",{parentName:"li"},"TransactionExecutor.TrExecutorError"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Modifies"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def ExecuteInternalMessage(in_msg, account, params, config):\nacc_balance = account.balance\nmsg_balance = in_msg.hdr.value\ncredit_first = not in_msg.hdr.bounce\nlt = max(account.last_tr_time, max(params.last_tr_lt, in_msg.lt + 1))\ntr = Transaction(account.account_id, account.status, lt, now(), in_msg)\ndescr = TransactionDescrOrdinary(credit_first: credit_first)\n\n      # If the bounce flag is not set, execute the Credit Phase\n      # before Storage phase\n      if credit_first:\n          credit_ph_res = credit_phase(account, tr, msg_balance, acc_balance)\n          if credit_ph_res is Ok:\n              descr.credit_ph = credit_ph_res.credit_ph\n          else:\n              return ExecutorError.TrExecutorError()\n\n      # Execute Storage Phase\n      storage_ph_res = storage_phase(account,\n                                     acc_balance,\n                                     tr,\n                                     is_masterchain,\n                                     config)\n      descr.storage_ph = storage_ph_res.storage_ph\n\n      # Why this is needed?\n      if credit_first and (msg_balance > acc_balance):\n          msg_balance = acc_balance\n\n      original_acc_balance = account.balance - tr.total_fees\n\n      if not credit_first:\n          credit_ph_res = credit_phase(account, tr, msg_balance, acc_balance)\n          if credit_ph_res is Ok:\n              descr.credit_ph = credit_ph_res.credit_ph\n          else:\n              return ExecutorError.TrExecutorError()\n\n      # Both storage and credit phases are completed at this point.\n      # We need to update the last_paid field not to loose this\n      # information in case of some further errors showing up.\n      account.last_paid = params.block_unixtime\n\n      # Parameters to be passed into TVM\n      smci = build_contract_info(acc_balance,\n                                 account.address,\n                                 params.block_lt,\n                                 lt,\n                                 params.seed_block)\n      # First element is the bottom of the stack\n      stack = Stack([acc_balance, msg_balance, Cell(in_msg), in_msg.body, False])\n\n      # Execute Compute Phase\n      compute_ph_res = compute_phase(in_msg,\n                                     account,\n                                     acc_balance,\n                                     msg_balance,\n                                     params.state_libs,\n                                     smci,\n                                     stack,\n                                     is_masterchain)\n\n      if not (compute_ph_res is Ok):\n          return ExecutorError.TrExecutorError()\n\n      descr.compute_ph = compute_ph_res.compute_ph\n      actions = compute_ph_res.actions\n      new_data = compute_ph_res.new_data\n\n      # Generated outbound messages to be sent into other accounts\n      out_msgs = []\n\n      compute_gas_fees = descr.compute_ph.gas_fees\n      tr.total_fee = tr.total_fee + compute_gas_fees\n\n      if descr.compute_ph.success:\n          act_phase_res = action_phase(tr,\n                                       account,\n                                       original_acc_balance,\n                                       acc_balance,\n                                       msg_balance,\n                                       phase.gas_fees,\n                                       actions,\n                                       new_data)\n          if act_phase_res is Ok:\n              descr.action = act_phase_res.action_ph\n              out_msgs = act_phase_res.msgs\n          else:\n              return ExecutorError.TrExecutorError()\n\n      if descr.action != None:\n          if descr.action.status_change == AccStatusChange.Deleted:\n              account = Account()\n              descr.destroyed = True\n          descr.aborted = not descr.action.success\n      else:\n          descr.aborted = True\n\n      # If the Action Phase failed, and the incoming message allows\n      # bounce answer, execute the Bounce Phase\n      if (descr.aborted == True) and (in_msg.hdr.bounce = True):\n          if descr.compute_ph is Vm:\n              bounce_ph_res = \\\n                  bounce_phase(msg_balance,\n                               acc_balance,\n                               compute_gas_fees,\n                               tr,\n                               my_addr)\n              if bounce_ph_res is Ok:\n                  descr.bounce = bounce_ph_res.bounce_ph\n                  if (bounce_ph_res.bounce_msg != None):\n                      out_msgs = out_msgs + [bounce_ph_res.bounce_msg]\n              else:\n                  return ExecutorError.TrExecutorError()\n          if descr.bounce is Ok:\n              acc_balance = original_acc_balance\n              if account.status == AccountStatus.AccStateUninit and \\\n                 acc_balance == 0:\n                  account = Account()\n              else:\n                  if account.is_none() and acc_balance != 0:\n                      account = Account.uninit(is_msg.hdr.dst, 0, last_paid,\n                                               acc_balance)\n\n      if account.status() == AccountStatus.AccStateUninit and acc_balance == 0:\n          account = Account()\n\n      tr.acc_end_status = account.status\n      account.balance = acc_balance\n      params.last_tr_lt = lt\n\n      upd_lt = add_messages(tr, out_msgs, params.last_tr_lt)\n      account.last_tr_time = upd_lt\n      tr.descr = descr\n      return Ok(tr, account)\n")),(0,s.kt)("p",null,"The function ",(0,s.kt)("inlineCode",{parentName:"p"},"add_messages"),"  assigns  the proper logical timestamp for\neach  message from  the  out_msgs collection,  and  then include  the\nmessage into the transaction."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def add_messages(tr, out_msgs, lt):\nlt_next = lt + len(out_msgs) + 1\nlt_next += 1\n\n       for msg in out_msgs:\n           msg.at = now()\n           msg.lt = lt\n           tr.add_out_message(msg)\n           lt_next += 1\n\n       return Ok(lt_next)\n")),(0,s.kt)("h2",{id:"external-message-processing-algorithm"},"External Message Processing Algorithm"),(0,s.kt)("p",null,"The execution of external message on the given account."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"in_msg")," \u2014 incoming message, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"params")," \u2014 executor parameters, has type ",(0,s.kt)("a",{parentName:"li",href:"#parameters"},"Parameters")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config")," \u2014 blockchain configuration, has type ",(0,s.kt)("a",{parentName:"li",href:"#blockchainconfig-parameters"},"BlockchainConfig"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("p",null,"On success, returns ",(0,s.kt)("em",{parentName:"p"},"Ok(acc1, trans)"),", such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc1")," \u2014 updated account, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"trans")," \u2014 transaction, has type ",(0,s.kt)("a",{parentName:"li",href:"#transaction"},"Transaction")," On error, returns error of the type ",(0,s.kt)("em",{parentName:"li"},"TransactionExecutor.TrExecutorError"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Modifies:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def ExecuteExternalMessage(in_msg, account, params, config):\nacc_balance = account.balance\nmsg_balance = in_msg.hdr.value\nis_masterchain = (in_msg.dst_workchain_id == -1)\n\n      lt = max(account.last_tr_time, max(params.last_tr_lt, in_msg.lt + 1))\n      tr = Transaction(account.account_id, account.status, lt, now(), Cell(in_msg))\n      descr = TransactionDescrOrdinary(credit_first: True)\n      in_fwd_fee = fwd_fee(Cell(in_msg))\n\n      if acc_balance < in_fwd_fee:\n          return ExecutorError.NoFundsToImportMsg\n\n      tr.total_fee = tr.total_fee + in_fwd_fee\n\n      # Execute Storage Phase\n      storage_ph_res = storage_phase(account,\n                                     acc_balance,\n                                     tr,\n                                     is_masterchain,\n                                     config)\n      descr.storage_ph = storage_ph_res.storage_ph\n\n      if account.balance >= tr.total_fees:\n          original_acc_balance = account.balance - tr.total_fees\n      else:\n          original_acc_balance = account_balance\n\n      # Credit Phase is skipped for external messages\n\n      # Storage phase is completed at this point\n      # We need to update the last_paid field not to loose this\n      # information in case of some further errors showing up\n      account.last_paid = params.block_unixtime\n\n      # Parameters to be passed into TVM\n      smci = build_contract_info(acc_balance,\n                                 account.address,\n                                 params.block_lt,\n                                 lt,\n                                 params.seed_block)\n      # First element is the bottom of the stack\n      stack = Stack([acc_balance, msg_balance, Cell(in_msg), in_msg.body, False])\n\n      # Execute Compute Phase\n      compute_ph_res = compute_phase(in_msg,\n                                     account,\n                                     acc_balance,\n                                     msg_balance,\n                                     params.state_libs,\n                                     smci,\n                                     stack,\n                                     is_masterchain)\n\n      if compute_ph_res is Ok:\n          descr.compute_ph = compute_ph_res.compute_ph\n      else:\n          return ExecutorError.TrExecutorError()\n\n      # Generated outbound messages to be sent into other\n      # accounts\n      out_msgs = []\n\n      compute_gas_fees = descr.compute_ph.gas_fees\n      tr.total_fee = tr.total_fee + compute_gas_fees\n\n      if descr.compute_ph.success:\n          act_phase_res = action_phase(tr,\n                                       account,\n                                       original_acc_balance,\n                                       acc_balance,\n                                       msg_balance,\n                                       phase.gas_fees,\n                                       accounts,\n                                       compute_ph_res.new_data)\n          if act_phase_res is Ok:\n              descr.action = act_phase_res.action_ph\n              out_msgs = act_phase_res.msgs\n          else:\n              return ExecutorError.TrExecutorError()\n\n      if descr.action != None:\n          if descr.action.status_change == AccStatusChange.Deleted:\n              account = Account()\n              descr.destroyed = True\n          descr.aborted = not descr.action.success\n      else:\n          descr.aborted = True\n\n      # The Bounce Phase is skipped for external messages\n\n      if account.status() == AccountStatus.AccStateUninit and acc_balance == 0:\n          account = Account()\n\n      tr.acc_end_status = account.status\n      account.balance = acc_balance\n      params.last_tr_lt = lt\n\n      upd_lt = add_messages(tr, out_msgs, params.last_tr_lt)\n      account.last_tr_time = upd_lt\n      tr.descr = descr\n      return Ok(tr, account)\n")),(0,s.kt)("h2",{id:"credit-phase"},"Credit Phase"),(0,s.kt)("p",null,"At this phase, coins from the message balance goes to the account balance.\nThis phase is executed only for internal messages. External messages have\nno coins attached."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account that the message is executed on, ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts#account-structure-definition"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")," \u2014 forming transaction, has type ",(0,s.kt)("a",{parentName:"li",href:"#transaction"},"Transaction")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance")," \u2014 message balance, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Grams")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 current balance of the account, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Grams"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("p",null,"The phase always succeeds. It returns the value of type:\n/Ok(TrCreditPhase(collected, msg_balance))/, such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"collected")," \u2014 the amount of coins withheld for the account debt, if any."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance")," \u2014 the amount of coins put on the account balance after the debt fee was conducted.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Modifies:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 updates the ",(0,s.kt)("inlineCode",{parentName:"li"},"due_payment"),"  field with the remaining debt, if any"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")," \u2014 updates the ",(0,s.kt)("inlineCode",{parentName:"li"},"total_fees"),"  field"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance")," \u2014 the original message balance after the debt conducted, if any"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 the account balance with message coins")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def credit_phase(account, tr, msg_balance, acc_balance):\ndue_payment = account.due_payment\ncollected = min(due_payment, msg_balance)\n\n         msg_balance = msg_balance - collected\n         due_payment_remaining = due_payment - collected\n\n         account.due_payment = due_payment_remaining\n         tr.total_fees = tr.total_fees + collected\n\n         # put message coins on the account balance\n         acc_balance = acc_balance + msg_balance\n         return Ok(TrCreditPhase(collected, msg_balance))\n")),(0,s.kt)("h2",{id:"storage-phase"},"Storage Phase"),(0,s.kt)("p",null,"This phase withholds the storage fee from the account balance. The fee amount\nis calculated using the algorithm ",(0,s.kt)("inlineCode",{parentName:"p"},"calc_storage_fee"),"  ",(0,s.kt)("a",{parentName:"p",href:"#data-storage-fee-calculation-algorithm"},"calc_storage_fee")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account that the message is executed on, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")," \u2014 forming transaction, has type ",(0,s.kt)("a",{parentName:"li",href:"#transaction"},"Transaction")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance")," \u2014 message balance, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Grams")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 current balance of the account, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Grams")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config")," \u2014 main blockchain parameters, has type ",(0,s.kt)("a",{parentName:"li",href:"#blockchainconfig-parameters"},"BlockchainConfig"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("p",null,"This phase always succeeds. The return values may differ ",(0,s.kt)("inlineCode",{parentName:"p"},"Ok(TrStoragePhase(collected, fee, status_change))"),", such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"collected")," \u2014 the amount of coins withheld for the storage fee"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"debt")," \u2014 if the balance was insufficient, the remaining debt of the account"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"status_change")," \u2014 should the account be frozen or deleted afterwards")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Modifies"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 updates ",(0,s.kt)("inlineCode",{parentName:"li"},"due_payment")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"status"),"  fields"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 the current balance after the fee got deducted"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")," \u2014 updates the ",(0,s.kt)("inlineCode",{parentName:"li"},"total_fee"),"  field")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def storage_phase(account, tr, msg_balance, acc_balance, config):\n# It is assumed that the current transaction must have a more\n# recent timestamp than the latest payment timestamp.\n# Otherwise, something is terribly wrong.\nassert (tr.now >= acc.last_paid)\n\n         # The account does not occupy any space, so do not charge the fee\n         if account == None:\n             return Ok(TrStoragePhase())\n\n         fee, account.storage_info = config.calc_storage_fee(account.storage_info,\n                                                             is_masterchain, tr.now)\n         if account.due_payment > 0:\n             fee = fee + account.due_payment\n             account.due_payment = None\n\n         if acc_balance >= fee:\n             acc_balance = acc_balance - fee\n             tr.total_fee = tr.total_fee + fee\n             return Ok(TrStoragePhase(fee, None, AccStatusChange.Unchanged))\n\n         storage_fees_collected = acc_balance\n         acc_balance = 0\n         tr.total_fee = tr.total_fee + storage_fees_collected\n         fee = fee - storage_fees_collected\n\n         need_freeze = fee > config.get_gas_config(is_masterchanin).freeze_due_limit\n         need_delete = \\\n             (account.status == AccountStatus.AccStateUninit or \\\n              account.status == AccountStatus.AccStateFrozen) and \\\n              fee > config.get_gas_config(is_masterchain).delete_due_limit\n\n         if need_delete:\n             tr.total_fee = 0\n             account = Account()\n             return Ok(TrStoragePhase(storage_fees_collected, fee,\n                                      AccStatusChange.Deleted))\n         elif need_freeze:\n             account.due_payment = fee\n             if account.status == AccountStatus.AccStateActive:\n                 account.status = AccountStatus.AccStateFrozen\n                 return Ok(TrStoragePhase(storage_fees_collected, fee,\n                                          AccStatusChange.Frozen))\n             else:\n                 return Ok(TrStoragePhase(storage_fees_collected, fee,\n                                          AccStatusChange.Unchanged))\n         else:\n             account.due_payment = fee\n             return Ok(TrStoragePhase(storage_fees_collected, fee,\n                                      AccStatusChange.Unchanged))\n")),(0,s.kt)("h2",{id:"compute-phase"},"Compute Phase"),(0,s.kt)("p",null,"Execute the account smart-contract, update the state, gather generated actions to pass on\nthe next phase."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg")," \u2014 message, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 current account balance, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Grams")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance")," \u2014 message balance,has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Grams")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"state_libs")," \u2014 code libraries, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Blob"),"  (not relevant; omitted)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"smc_info")," \u2014 extra data for TVM, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"SmartContractInfo")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"stack")," \u2014 TVM initial stack values"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"is_masterchain")," \u2014 is the account belongs to Masterchain, has type bool")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"On success, returns ",(0,s.kt)("em",{parentName:"p"},"Ok(TrComputePhase, out_actions, new_data)"),",\nsuch that:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"TrComputePhase")," \u2014 actual Compute Phase Descriptor"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"out_actions")," \u2014 an ordered list of generated actions"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"new_data")," \u2014 updated smart-contract state"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"On error, returns ",(0,s.kt)("inlineCode",{parentName:"p"},"Err(ExecutorError)")," with proper code."))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Modifies:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 updated account state"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"smc_info")," \u2014 mycode field set to point to the code of the smart-contract"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 account balance after the gas fee deduction")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def uninit_account(account):\nif account.storage.state is AccountState.AccountActive:\naccount.storage.state = AccountState.AccountUninit\n\n    def compute_phase(msg, account, acc_balance, msg_balance, state_libs, smc_info,\n                      stack, is_masterchain):\n        result_acc = account.clone()\n        vm_phase = TrComputePhaseVm()\n\n        is_external = msg.header is ExtInMsgInfo\n        if result_acc == None:\n            new_acc = account_from_message(msg, msg_balance)\n            if new_acc != None:\n                result_acc = new_acc\n                result_acc.last_paid = smc_info.unix_time\n                account = result_acc\n                account.uninit_account()\n\n        if acc_balance == 0:\n            return Ok(TrComputePhase:skipped(ComputeSkipReason.NoGas), None, None)\n\n        gas_config = config.get_gas_config(is_masterchain)\n        gas = init_gas(acc_balance, msg_balance, is_external, gas_config)\n\n        # Is it possible?\n        if gas.gas_limit == 0 and gas.gas_credit == 0:\n            return Ok(TrComputePhase.skipped(ComputeSkipReason.NoGas), None, None)\n\n        libs = []\n        if msg.state_init != None:\n            libs = state_init.libraries\n\n        (reason, result_acc) = result_acc.compute_new_state(acc_balance, msg)\n\n        if reason != None:\n            return Ok(TrComputePhase.skipped(reason), None, None)\n\n        vm_phase.gas_credit = gas.gas_credit\n        vm_phase.gas_limit = gas.gas_limit\n\n        if result_acc.code == None:\n            if is_external:\n                return ExecutorError.NoAcceptError()\n            vm_phase.success = False\n            vm_phase.gas_fees = gas_config.calc_gas_fee(0)\n            if acc_balance < vm_phase.gas_fees:\n                return ExecutorError.TrExecutorError()\n            acc_balance -= vm_phase.gas_fees\n            account = result_acc\n            return Ok(TrComputePhase.Vm(vm_phase), None, None)\n\n        code = result_acc.code\n        data = result_acc.data\n\n        libs.push(result_acc.libraries)   # local libraries\n        libs.push(state_libs)             # masterchain libraries\n\n        smc_info.mycode = code\n\n        # Here, we initialize abstract TVM virtual machine.\n        # The exact behavior of this device is out of scope.\n        vm = TVM(code)\n        vm.smc_info = smc_info\n        vm.config = config\n        vm.stack = stack\n        vm.data = data\n        vm.libraries = libs\n        vm.gas = gas\n\n        result = vm.execute()\n\n        vm_phase.success = vm.commited_state.is_committed\n        # vm.gas may have been updated after the execution\n        gas_vm = vm.gas\n        # how much credited gas remains unspent\n        credit = gas_vm.gas_credit\n        used = gas_vm.gas_used\n        vm_phase.gas_used = used\n\n        if credit != 0:\n            if is_external:\n                # The smart-contract has to explicitly accept the external message,\n                # otherwise it gets rejected. The acceptance of a message manifests\n                # itself in the credit field being equal to 0.\n                return ExecutorError.NoAcceptError()\n            vm_phase.gas_fees = 0\n        else:\n            gas_fees = gas_config.calc_gas_fee(used)\n            vm_phase.gas_fees = gas_fees\n\n        vm_phase.mode = 0\n        vm_phase.vm_steps = vm.steps\n\n        new_data = vm.commited_state\n        if new_data == None:\n            vm_phase.success = False\n\n        out_actions = vm.actions\n        if out_actions = None:\n            vm_phase.success = False\n\n        account = result_acc\n        return Ok(TrComputePhase.Vm(vm_phase), out_actions, new_data)\n")),(0,s.kt)("h3",{id:"compute-phase-success-conditions"},"Compute Phase Success Conditions"),(0,s.kt)("p",null,"We  would like  to explicitly  articulate  what it  means for  the\n",(0,s.kt)("em",{parentName:"p"},"Compute Phase"),"  to  succeed.  To do that,\n",(0,s.kt)("em",{parentName:"p"},"we  specify the opposite condition"),", i.e. when  it fails.\nIn all other  scenarios the  phase is\nconsidered successful."),(0,s.kt)("p",null,"The success status is important, because it\ndecides if the action phase has to be executed afterwards."),(0,s.kt)("p",null,"For the phase to fail, one of the following conditions must hold:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The smart-contract data is not committed after the execution",(0,s.kt)("sup",{parentName:"li",id:"fnref-1"},(0,s.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,s.kt)("li",{parentName:"ol"},"The new smart-contract data is ill-formed"),(0,s.kt)("li",{parentName:"ol"},"The generated actions list is ill-formed")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"The  compute  phase  may  be considered   successful  even   if  the   computation  thrown   an exception. This is quite unintuitive, yet very important fact.")),(0,s.kt)("h3",{id:"compute-phase-exit-code"},"Compute Phase Exit Code"),(0,s.kt)("p",null,"The exit code value shows  if the computation finished normally or\nwas aborted  due to some  exception."),(0,s.kt)("p",null,"In case of the former, the exit code should have values 0 or 1."),(0,s.kt)("p",null,"In  case of  the latter,  the exception  might be  of a  system or\ncustom  type.  If  the  exception  is a  system  one, i.e.   not\nintentionally emitted by the code using a special TVM instruction,\nthe exit code contains one of the standard exit codes."),(0,s.kt)("p",null,"If the exception  is custom, then the exit code  should also equal\nto 0  or 1, but there  is an extra ",(0,s.kt)("inlineCode",{parentName:"p"},"exit_arg"),"   field that provides\nthe user defined code."),(0,s.kt)("p",null,"For standard TVM exception codes, see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/ton-labs-types/blob/af1dc71a9a2b46cb0d55a0956e44726374ba7c0c/src/types.rs#L306"},"here"),"."),(0,s.kt)("h3",{id:"calculate-gas-fee-algorithm"},"Calculate Gas Fee Algorithm"),(0,s.kt)("p",null,"The algorithm to calculate the amount of coins to be paid for the consumed gas."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gas_prices")," \u2014 a structure with actual gas prices, has type  ",(0,s.kt)("a",{parentName:"li",href:"#calculate-gas-fee-algorithm"},"GasLimitsPrice")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gas_used")," \u2014 amount of gas units consumed by the computation, has type Uint")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))," The amount of coins to be paid for the gas."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Modifies:"))," None."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def calc_gas_fee(gas_prices, gas_used):\n   if gas_used <= gas_prices.flat_gas_limit:\n       return gas_prices.flat_gas_limit\n\n   gas_fee = flat_gas_price + (gas_used - gas_prices.flag_gas_limit) * \\\n       gas_prices.gas_price\n   return gas_fee\n")),(0,s.kt)("h3",{id:"compute-new-state-algorithm"},"Compute New State Algorithm"),(0,s.kt)("p",null,"The algorithm ",(0,s.kt)("inlineCode",{parentName:"p"},"compute_new_state"),"  computes the actual account state\nby given account record, the balance and the message. In particular,\nthis algorithm is used to initialize uninitialized accounts with\ncode and data borrowed from an external message with non-empty\n",(0,s.kt)("inlineCode",{parentName:"p"},"state_init")," field."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Input"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account structure, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balace")," \u2014 current account balance, has type Uint"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"in_msg")," \u2014 message being executed, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Output"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"On success, returns ",(0,s.kt)("strong",{parentName:"li"},"None"),"."),(0,s.kt)("li",{parentName:"ul"},"On failure, returns one of the ",(0,s.kt)("inlineCode",{parentName:"li"},"ComputeSkipReason")," codes.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Modifies"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def compute_new_state(account, acc_balance, in_msg):\n    if account.status == AccountStatus.AccStateNonexist:\n        if in_msg.state_init == None:\n            return ComputeSkipReason.NoState\n        else:\n            return ComputeSkipReason.BadState\n    elif account.status == AccountStatus.AccStateActive:\n        return None\n    elif account.status == AccountStatus.AccStateUninit:\n        if in_msg.state_init != None:\n            if account.try_activate_by_init_code_hash(in_msg.state_init) != None:\n                return None\n            else:\n                return ComputeSkipReason.BadState\n        else:\n            return ComputeSkipReason.NoState\n    elif account.status == AccountStatus.AccStateFrozen:\n        if acc_balance != 0 and in_msg.state_init != None:\n            if account.try_activate_by_init_code_hash(in_msg.state_init) != None:\n                return None\n            else:\n                return ComputeSkipReason.BadState\n        return ComputeSkipReason.NoState\n\n    return None\n")),(0,s.kt)("h3",{id:"activate-by-init-algorithm"},"Activate By Init Algorithm"),(0,s.kt)("p",null,"The algorithm ",(0,s.kt)("inlineCode",{parentName:"p"},"try_activate_by_init_code_hash"),"    does    the initialization or re-initialization of the account, with the given ",(0,s.kt)("inlineCode",{parentName:"p"},"state_init"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account structure to be initialized"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"state_init")," \u2014 state_init field from the inbound message")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("p",null,"On success, returns ",(0,s.kt)("strong",{parentName:"p"},"Ok"),"\nOn failure, returns ",(0,s.kt)("strong",{parentName:"p"},"Err")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Modifies:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 the field ",(0,s.kt)("inlineCode",{parentName:"li"},"storage.state")," gets updated by the state_init on success")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def try_activate_by_init_code_hash(account, state_init):\n    if account == None:\n        return Err\n\n    new_state = None\n\n    if account.storage.state == AccountState.AccountUninit:\n        if hash(state_init) == account.addr.address:\n            new_state = AccountState.AccountActive(\n                hash(state_init.code), state_init\n            )\n        else:\n            return Err\n    elif account.storage.state == \\\n         AccountState.AccountFrozen(init_code_hash, state_init_hash):\n        if state_init_hash == hash(state_init):\n            new_state = AccountState.AccountActive(init_code_hash, state_init)\n        else:\n            return Err\n    else:\n        new_state = account.storage.state\n\n    account.storage.state = new_state\n    return Ok\n")),(0,s.kt)("h3",{id:"initial-gas-algorithm"},"Initial Gas Algorithm"),(0,s.kt)("p",null,"The  algorithm  computes  TVM Gas-related  initial  values.  Those values  are  provided  to  the  virtual  machine  right  before  a smart-contract execution. If the execution takes more than allowed gas, it gets stopped."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance"),": current account balance"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance"),": message balance"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"is_external"),": is the message external"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gas_info"),": structure with limits and prices for the workchain")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output"))),(0,s.kt)("p",null,"Returns the structure Gas() containing 4 values:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gas_limit"),": the maximum gas value available for any smart-contract of the workchain"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gas_credit"),": the amount of gas to be credited for the execution before the smart-contract accepts the message"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gas_max"),": the maximum allowed gas to be spent on the execution of the current smart-contract"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gas_prices"),": a structure with gas prices")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Modifies")),": None"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def init_gas(acc_balance, msg_balance, is_external, gas_info):\n    gas_max = min(gas_info.gas_limit, gas_info.calc_gas(acc_balance))\n    gas_credit = 0\n    if is_external:\n        gas_credit = min(gas_info.gas_credit, gas_max)\n        gas_limit = gas_credit\n    else:\n        gas_limit = min(gas_max, gas_info.calc_gas(msg_balance))\n\n    return Gas(gas_limit, gas_credit, gas_max, gas_info.get_real_gas_price())\n")),(0,s.kt)("h3",{id:"account-from-message-algorithm"},"Account From Message Algorithm"),(0,s.kt)("p",null,"The algorithm creates new account  by using data from the internal\nmessage. External messages are rejected. Creation of a new account\nbased  on   an  external   message  is  located   elsewhere.   See\n",(0,s.kt)("a",{parentName:"p",href:"#compute-new-state-algorithm"},"compute_new_state")," algorithm."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"msg: incoming message being processed, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message")),(0,s.kt)("li",{parentName:"ul"},"msg_remaining_balance: the current amount of coins left on the message balance, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Either returns a new ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")," object, or None. Both results are considered successful.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Modifies")),": None"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def account_from_message(msg, msg_remaining_balance):\n    if not (msg.header is IntMsgInfo):\n        return None\n    if msg_remaining_balance == 0:\n        return None\n\n    header = msg.header\n    init = msg.state_init\n\n    if init != None and init.code != None and hash(init) == header.dst.address:\n        return Account.active_by_init_code_hash(hdr.dst, msg_remaining_balance,\n                                                0, init)\n    if header.bounce:\n        return None\n    else:\n        return Account.uninit(hdr.dst, 0, 0, msg_remaining_balance)\n")),(0,s.kt)("h2",{id:"action-phase"},"Action Phase"),(0,s.kt)("p",null,"By given ordered action list, the Action phase executes each action item in  the list by  applying proper  action handler."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Input"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")," \u2014 transaction being constructed, has type ",(0,s.kt)("a",{parentName:"li",href:"#transaction"},"Transaction")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")," \u2014 account executing the message, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts"},"Account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"original_acc_balance")," \u2014 account balance after storage and credit phase, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 the mutable copy of the original_acc_balance, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_remaining_balance")," \u2014 message balance without debt value if any, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"compute_phase_fees")," \u2014 gas fees from the compute phase, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"actions")," \u2014 list of actions generated on the Compute Phase, has type list(",(0,s.kt)("a",{parentName:"li",href:"#type-of-actions"},"OutAction"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"new_data")," \u2014 the smart-contract data after the Compute Phase, some binary blob.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Output"),":")),(0,s.kt)("p",null,"On success, returns ",(0,s.kt)("inlineCode",{parentName:"p"},"Ok(phase, messages)")," such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"phase")," denotes the ",(0,s.kt)("a",{parentName:"li",href:"#action-phase-descriptor"},"Action Phase Descriptor")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"messages")," denotes a list of messages to be sent, has type list(",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message"),")")),(0,s.kt)("p",null,"On error, returns ",(0,s.kt)("em",{parentName:"p"},"Err(result_code)"),", such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"result_code")," describes a type of an error, see ",(0,s.kt)("a",{parentName:"li",href:"#action-result-codes"},"here"),".")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Modifies"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_remaining_balance"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"MAX_ACTIONS = 255\n\n     def action_phase(tr, account, original_acc_balance, acc_balance,\n                      msg_remaining_balance, compute_phase_fees, actions, new_data):\n\n       acc_copy = account.clone()\n       acc_remaining_balance = acc_balance\n       phase = TrActionPhase()\n       total_reserved_value = 0\n\n       # Serialization issues are put aside, it is too low-level for\n       # our purpose.\n\n       # Interesting to note, actions overload leads to OK, not Error?\n       if len(actions) > MAX_ACTIONS:\n           phase.result_code = RESULT_CODE_TOO_MANY_ACTIONS\n           return Ok(phase, [])\n\n       phase.action_list_hash = hash(actions)\n       phase.tot_actions = len(actions)\n\n       account_deleted = False\n       out_msgs_tmp = []\n\n       address = acc_copy.address\n\n       for action in actions:\n           if action is OutAction.SendMsg:\n               if action.mode & SENDMSG_ALL_BALANCE:\n                   out_msgs_tmp.push((action.mode, action.out_msg))\n                   continue\n               result = outmsg_action_handler(phase,\n                                              action.mode,\n                                              action.out_msg,\n                                              acc_remaining_balance,\n                                              msg_remaining_balance,\n                                              compute_phase_fees,\n                                              config,\n                                              address,\n                                              total_reserved_value,\n                                              account_deleted)\n               if result is Ok:\n                   phase.msgs_created += 1\n                   out_msgs_tmp.push((action.mode, action.out_msg))\n               else:\n                   return result\n           elif action is OutAction.ReserveCurrency:\n               result = reserve_action_handler(action.mode,\n                                               action.value,\n                                               original_acc_balance,\n                                               acc_remaining_balance)\n               if result is Ok:\n                   phase.spec_actions += 1\n                   total_reserved_value += result.reserved_value\n               else:\n                   phase.valid = True\n                   phase.result_code = result\n                   # phase.no_funds = True\n                   return Ok(phase, [])\n           else:\n               return Ok(phase, [])\n\n       # process messages that have SENDMSG_ALL_BALANCE flag set last\n       # skipping all other already processed messages\n       out_msgs = []\n       for (mode, out_msg) in out_msgs_tmp:\n           if not (mode & SENDMSG_ALL_BALANCE):\n               out_msgs.push(out_msg)\n               continue\n           result = outmsg_action_handler(phase, mode, out_msg,\n                                          acc_remaining_balance,\n                                          msg_remaining_balance,\n                                          compute_phase_fees,\n                                          config,\n                                          address,\n                                          total_reserved_value,\n                                          account_deleted)\n           if result == Ok:\n               phase.msgs_created += 1\n               out_msgs.push(out_msg)\n           else:\n               return Ok(phase, [])\n\n       acc_remaining_balance += total_reserved_value\n       tr.total_fee += phase.total_action_fees\n\n       if account_deleted:\n           phase.status_change = AccStatusChange.Deleted\n\n       phase.valid = True\n       phase.success = True\n\n       acc_balance = acc_remaining_balance\n       account = acc_copy\n       account.data = new_data\n\n       return Ok(phase, out_msgs)\n")),(0,s.kt)("h3",{id:"action-phase-success-condition"},"Action Phase Success Condition"),(0,s.kt)("p",null,"All actions formed at the Compute Phase  were successfully processed.\nIf an action had a special error-canceling flag set, such error will\nnot result in the whole phase failure. The action will be skipped in\nthis case."),(0,s.kt)("h3",{id:"action-phase-validity-condition"},"Action Phase Validity Condition"),(0,s.kt)("p",null,"To specify the validity condition, we will define the opposite, i.e. when\nthe action phase is considered ",(0,s.kt)("inlineCode",{parentName:"p"},"invalid"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The number of actions in the action list is greater than ",(0,s.kt)("inlineCode",{parentName:"li"},"MAX_ACTIONS")),(0,s.kt)("li",{parentName:"ul"},"Any ",(0,s.kt)("inlineCode",{parentName:"li"},"SendMsg"),"  action processing finished with an error"),(0,s.kt)("li",{parentName:"ul"},"The unknown action type was found during the processing")),(0,s.kt)("p",null,"In all other cases, the action phase is considered ",(0,s.kt)("inlineCode",{parentName:"p"},"valid"),"."),(0,s.kt)("h3",{id:"sendmsg-action-handler"},"SendMsg Action Handler"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"SendMsg"),"  action handler  is responsible for generating messages\nto be sent.  It may fail due to several reasons. In this case, the\naction phase get stopped,  unless the ",(0,s.kt)("inlineCode",{parentName:"p"},"SENDMSG_IGNORE_ERROR"),"  flag is\nset."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Input"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"phase")," \u2014 actual ",(0,s.kt)("a",{parentName:"li",href:"#action-phase-descriptor"},"Action Phase Descriptor")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"mode")," \u2014 flags for sending the message"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg")," \u2014 message being sent, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 actual account balance, has type UInt"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance")," \u2014 the message balance after debt being deducted, has type Uint"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"compute_phase_fees")," \u2014 gas fees from Compute Phase"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"config")," \u2014 blockchain configuration, has type ",(0,s.kt)("a",{parentName:"li",href:"#blockchainconfig-parameters"},"BlockchainConfig")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"my_addr")," \u2014 account ",(0,s.kt)("a",{parentName:"li",href:"/arch/accounts#account-address"},"address")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"reserved_value")," \u2014 the value of coins reserved by the ReserveCoins actions"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account_deleted")," \u2014 the output value, set to True if account needs to be deleted")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Output"),":")),(0,s.kt)("p",null,"On success, returns Ok(value), such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"value")," \u2014 the amount of coins to be deducted from the account balance")),(0,s.kt)("p",null,"On failure, returns Err(result_code), such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"result_code")," \u2014 describes the error, see ",(0,s.kt)("a",{parentName:"li",href:"#action-result-codes"},"here"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Modifies"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"phase")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"mode")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg_balance")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account_deleted"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"MAX_MSG_BITS = 2**21  # 2 Mb\nMAX_MSG_CELLS = 2**13\n\ndef get_fwd_prices(config, is_masterchain):\n    if is_masterchain:\n        return config.fwd_prices_mc\n    else:\n        return config.fwd_prices_wc\n\ndef outmsg_action_handler(phase, mode, msg, acc_balance, msg_balance,\n                          compute_phase_fees, config, my_addr, reserved_value,\n                          account_deleted):\n    invalid_flags = SENDMSG_REMAINING_MSG_BALANCE or SENDMSG_ALL_BALANCE\n    mode_not_valid = mode and (not SENDMSG_VALID_FLAGS)\n    mode_has_invalid = mode and invalid_flags == invalid_flags\n    mode_delete_not_sab = (mode and SENDMSG_DELETE_IF_EMPTY) and \\\n        (not (mode and SENDMSG_ALL_BALANCE))\n    if mode_not_valid or mode_has_invalid or mode_delete_not_sab:\n        return Err(RESULT_CODE_UNSUPPORTED)\n\n    skip = not (mode and SENDMSG_IGNORE_ERROR)\n\n    msg.header.src = my_addr\n    fwd_prices = config.get_fwd_prices(msg.is_masterchain())\n    compute_wd_fee = fwd_prices.fwd_fee(Cell(msg))\n\n    # The message should be either internal message or event.\n    # It is impossible to send external message from the smart-contract.\n    if not ((msg.header is IntMsgInfo) or (msg.header is ExtOutMsgInfo)):\n        return Err(-1)\n\n    if msg.header is IntMsgInfo:\n        # =====================================\n        # Internal message\n        # =====================================\n        msg.header.bounced = False\n        result_value = msg.header.value\n        msg.header.ihr_disabled = True\n        msg.header.ihr_fee = 0\n\n        fwd_fee = max(msg.header.fwd_fee, compute_wd_fee)\n        fwd_mine_fee = fwd_prices.mine_fee(fwd_fee)\n        total_fwd_fees = fwd_fee + msg.header.ihr_fee\n        fwd_remain_fee = fwd_fee - fwd_mine_fee\n\n        if (mode and SENDMSG_ALL_BALANCE):\n            result_value = acc_balance\n            msg.header.value = acc_balance\n            mode = (mode and (not SENDMSG_PAY_FEE_SEPARATELY))\n\n        if (mode and SENDMSG_REMAINING_MSG_BALANCE):\n            # Send all the remaining balance of the inbound message\n            result_value += msg_balance\n            if not (mode and SENDMSG_PAY_FEE_SEPARATELY):\n                if result_value < compute_phase_fees:\n                    return Err()\n                result_value -= compute_phase_fees\n            msg.header.value = result_value\n\n        if (mode and SENDMSG_PAY_FEE_SEPARATELY):\n            result_value += total_fwd_fees\n        else:\n            if msg.header.value < total_fwd_fees:\n                return Err()\n            else:\n                msg.header.value -= total_fwd_fees\n        msg.header.fwd_fee = fwd_remain_fee\n    else:\n        # =====================================\n        # Event\n        # =====================================\n        fwd_mine_fee = compute_fwd_fee\n        total_fwd_fees = compute_fwd_fee\n        result_value = compute_fwd_fee\n\n    if acc_balance < result_value:\n        return Err(RESULT_CODE_NOT_ENOUGH_GRAMS)\n\n    if (mode and SENDMSG_DELETE_IF_EMPTY) and \\\n       (mode and SENDMSG_ALL_BALANCE) and \\\n       (acc_balance + reserved_value == 0):\n        account_deleted = True\n\n    if total_fwd_fees != 0:\n        phase.total_fwd_fees += total_fed_fees\n\n    if fwd_mine_fee != 0:\n        phase.total_action_fees += fwd_mine_fee\n\n    phase.tot_msg_size.append(Cell(msg))\n\n    if phase.tot_msg_size.bits() > MAX_MSG_BITS or \\\n       phase.tot_msg_size.cells() > MAX_MSG_CELLS:\n        return Err(RESULT_CODE_INVALID_BALANCE)\n\n    if mode and (SENDMSG_ALL_BALANCE or SENDMSG_REMAINING_MSG_BALANCE):\n        msg_balance = 0\n\n    return Ok(result_value)\n")),(0,s.kt)("h3",{id:"reservecurrency-action-handler"},"ReserveCurrency Action Handler"),(0,s.kt)("p",null,"ReserveCurrency action handler is responsible for managing the reserve coins."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Input:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"mode")," \u2014 ",(0,s.kt)("a",{parentName:"li",href:"#action-reservecurrency"},"Reserve flags")," for the reserve action, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"val")," \u2014 amount of coins to be reserved, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"orig_acc_balance")," \u2014 account balance after the deduction of the storage fee and the debt, if any, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_remaining_balance")," \u2014 amount of coins left on the balance after the reserve, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Output:"))),(0,s.kt)("p",null,"On success, returns",(0,s.kt)("inlineCode",{parentName:"p"},"Ok(reserved)"),"  value, such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"reserved"),"  denotes the amount of coins being reserved for the account")),(0,s.kt)("p",null,"On failure, returns ",(0,s.kt)("em",{parentName:"p"},"Err(result_code)"),", such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"result_code"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Modifies"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_remaining_balance")," \u2014 remaining account balance after the reserve amount being withheld")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def reserve_action_handler(mode, val, orig_acc_balance, acc_remaining_balance):\n    if mode and (not RESERVE_VALID_MODES):\n        return Err(RESULT_CODE_UNKNOWN_OR_INVALID_ACTION)\n\n    reserved = 0\n    if mode and RESERVE_PLUS_ORIG:\n        if mode and RESERVE_REVERSE:\n            reserved = orig_acc_balance\n            if reserved < val:\n                return Err(RESULT_CODE_UNSUPPORTED)\n            reserved -= val\n        else:\n            reserved = val\n            reserved += orig_acc_balance\n    else:\n        if mode and RESERVE_REVERSE:\n            return Err(RESULT_CODE_UNKNOWN_OR_INVALID_ACTION)\n        reserved = val\n\n    if mode and RESERVE_IGNORE_ERROR:\n        reserved = min(reserved, acc_remaining_balance)\n\n    remaining = acc_remaining_balance\n    if remaining < reserved:\n        return Err(RESULT_CODE_NOT_ENOUGH_GRAMS)\n\n    remaining -= reserved\n    remaining, acc_remaining_balance = acc_remaining_balance, remaining\n\n    if mode and RESERVE_ALL_BUT:\n        reserved, acc_remaining_balance = acc_remaining_balance, reserved\n\n    return Ok(reserved)\n")),(0,s.kt)("h2",{id:"bounce-phase"},"Bounce Phase"),(0,s.kt)("p",null,"If error happens on the previous phases, the bounce phase takes place."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Input"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remaining_msg_balance")," \u2014 message balance after all previous phases executed, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"acc_balance")," \u2014 remaining account balance after all previous phases executed, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"compute_phase_fees")," \u2014 the fees of the compute phase, has type ",(0,s.kt)("inlineCode",{parentName:"li"},"Uint")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"msg")," \u2014 message being processed, has type ",(0,s.kt)("a",{parentName:"li",href:"/arch/message"},"Message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")," \u2014 transaction object, has type ",(0,s.kt)("a",{parentName:"li",href:"#transaction"},"Transaction"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Output"),":")),(0,s.kt)("p",null,"On success, returns ",(0,s.kt)("inlineCode",{parentName:"p"},"Ok(TrBouncePhase, bounce_message)"),", such that:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"TrBouncePhase"),"  is a Bounce Phase Descriptor"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bounce_message"),"  is a bounce message to be included into the out_msgs queue")),(0,s.kt)("p",null,"On error, returns /ExecutorError.TrExecutorError/"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"Modifies"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tr")," \u2014 adds the bounce message delivery fee to the total")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},(0,s.kt)("em",{parentName:"em"},"NOTE"),":")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Function ",(0,s.kt)("inlineCode",{parentName:"li"},"get_fwd_prices()"),"  was defined ",(0,s.kt)("a",{parentName:"li",href:"#sendmsg-action-handler"},"here"),".")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def bounce_phase(remaining_msg_balance, acc_balance,\n                 compute_phase_fees, msg, tr):\n    header = msg.header\n    if not header.bounce:\n        return ExecutorError.TrExecutorError()\n\n    header2 = header.clone()\n    header2.src, header2.dst = header.dst, header.src\n    storage = StorageUsedShort()\n    fwd_prices = config.get_fwd_prices(msg.is_masterchain)\n    fwd_full_fees = fwd_prices.fwd_fee(Cell())\n    fwd_mine_fees = fwd_prices.mine_fee(fwd_full_fees)\n    fwd_fees = fwd_full_fees - fwd_mine_fees\n\n    if remaining_msg_balance < fwd_full_fees + compute_phase_fees:\n        return Ok(TrBouncePhase.no_funds, None)\n\n    acc_balance -= remaining_msg_balance\n    remaining_msg_balance -= fwd_full_fees\n    remaining_msg_balance -= compute_phase_fees\n    header2.ihr_disabled = True\n    header2.bounce = False\n    header2.bounced = True\n    header2.ihr_fee = 0\n    header2.fwd_fee = fwd_fees\n    header2.value = remaining_msg_balance\n\n    bounce_msg = Message.with_header(header2)\n    if config.has_capability(GlobalCapabilities.CapBounceMsgBody):\n        body = msg.body.clone()\n        body.shrink_data(0..256) # leave only 256 bits of the original body\n        bounce_msg.body = body\n\n    tr.total_fees += fwd_mine_fees\n    return Ok(TrBouncePhase.ok(storage, fwd_mine_fees, fwd_fees), bounce_msg)\n")),(0,s.kt)("h2",{id:"functional-properties"},"Functional Properties"),(0,s.kt)("p",null,"In this  section, we  define the  main risks  of malfunction  in the module, and define several higher-level properties that should hold for the module to mitigate those risks."),(0,s.kt)("h3",{id:"risks"},"Risks"),(0,s.kt)("p",null,"We define a risk as a hazard event causing a significant loss for the end user.\nWe distinguish the following types of risks."),(0,s.kt)("h4",{id:"financial-risks"},"Financial Risks"),(0,s.kt)("p",null,"The Transaction Executor is the only place in the Node that is responsible for\nchanging  the   account  balance.  Hence,  any   errors  in  related\noperations  lead to  tokens loss  for the  user.  We  identify the\nfollowing financial risks for the module:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Incorrect storage, delivery or gas fees calculation logic"),(0,s.kt)("li",{parentName:"ol"},"Incorrect message value processing logic"),(0,s.kt)("li",{parentName:"ol"},"Incorrect ",(0,s.kt)("inlineCode",{parentName:"li"},"SendMsg"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"ReserveCoins"),"  actions processing logic")),(0,s.kt)("h4",{id:"behavioral-risks"},"Behavioral Risks"),(0,s.kt)("p",null,"Everscale blockchain praises  the distributed programming paradigm\nin  application development.  It means  that instead  of producing\nhuge smart-contract  monoliths, it is encouraged  to separate the\nsystem into many manageable smart-contracts  that communicate with\neach other by means of message passing."),(0,s.kt)("p",null,"The message passing scheme used in a system induces some protocol.\nIf message passing breaks in an unexpected way, the whole protocol\nmay stall, potentially  leading to global system  deadlocks."),(0,s.kt)("p",null,"It is of  utter importance to guarantee that  all produced correct\nmessages  will   be  eventually   delivered  to   the  destination\naccount. The delivery  process is complicated and  rely on several\nnode components. Here,  we identify risks related  to the Transaction Executor\npart of it:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Successful SendMsg action does not lead to creation of a corresponding\nmessage"),(0,s.kt)("li",{parentName:"ul"},"Generated messages do not occur in the Out Message queue"),(0,s.kt)("li",{parentName:"ul"},"Message delivery order gets broken"),(0,s.kt)("li",{parentName:"ul"},"A bounce message does not get generated as expected")),(0,s.kt)("h3",{id:"assumptions"},"Assumptions"),(0,s.kt)("p",null,"All the properties formulated with the following assumptions in mind:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We consider only ",(0,s.kt)("inlineCode",{parentName:"li"},"ordinary"),"  accounts, not system (special) accounts.\nFor the latter, the properties might look different.")),(0,s.kt)("h3",{id:"system-properties"},"System Properties"),(0,s.kt)("p",null,"System properties are high-level general statements on the system behavior\nthat the Transaction Executor should obey to. A subset of those statements related to\nmitigating the main risks, identified in the previous section."),(0,s.kt)("h4",{id:"fees"},"Fees"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"FEE1")," \u2014 Gas fees for the computation equal the amount calculated using\nthe algorithm ",(0,s.kt)("a",{parentName:"li",href:"#calculate-gas-fee-algorithm"},"calc_gas_fee"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"FEE2")," \u2014 Storage fees for an account equal the amount calculated using\nthe algorithm ",(0,s.kt)("a",{parentName:"li",href:"#data-storage-fee-calculation-algorithm"},"calc_storage_fee"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"FEE3")," \u2014 Forwarding fees are calculated according to the algorithm ",(0,s.kt)("a",{parentName:"li",href:"#message-passing-fee"},"message_passing_fees")," ."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"FEE4")," \u2014 During the message execution process, all type of fees get deducted\nonly once for an account.")),(0,s.kt)("h4",{id:"message-processing"},"Message Processing"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"MSG1")," \u2014 The message coins get credited to the account balance before\nexecuting a smart-contract logic."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"MSG2")," \u2014 Messages delivery order between the current account ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mn",{parentName:"msub"},"1"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a_1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," and some other account ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mn",{parentName:"msub"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a_2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),"\ndoes not depend on messages sent from ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mn",{parentName:"msub"},"1"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a_1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," to some other account ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mn",{parentName:"msub"},"3"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a_3")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"3")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),", when ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mn",{parentName:"msub"},"2")),(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2260"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mn",{parentName:"msub"},"3"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a_2 \\neq a_3")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mord vbox"},(0,s.kt)("span",{parentName:"span",className:"thinbox"},(0,s.kt)("span",{parentName:"span",className:"rlap"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"inner"},(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\ue020"))),(0,s.kt)("span",{parentName:"span",className:"fix"}))))),(0,s.kt)("span",{parentName:"span",className:"mrel"},"=")),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"3")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),".")),(0,s.kt)("h4",{id:"credit-phase-processing"},"Credit Phase Processing"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"CRD1")," \u2014 If the inbound message is external, the credit phase does not get executed."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"CRD2")," \u2014 If the inbound message is internal, the account's balance get credited with the\nmessage value minus the account debt, if any.")),(0,s.kt)("h4",{id:"storage-phase-processing"},"Storage Phase Processing"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"STR1")," \u2014 If there is not enough funds to cover the storage phase fee on the account's balance, and if the account is in the Active status, then the account gets a debt storing in the ",(0,s.kt)("inlineCode",{parentName:"li"},"due_payment")," field of the account. If the debt value exceeds the ",(0,s.kt)("inlineCode",{parentName:"li"},"freeze_due_limit")," value, the account is switched into a frozen status. If the debt exceeds the ",(0,s.kt)("inlineCode",{parentName:"li"},"delete_due_limit")," value, the account gets deleted.")),(0,s.kt)("h4",{id:"compute-phase-processing"},"Compute Phase Processing"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"CMP1")," \u2014 If the ",(0,s.kt)("a",{parentName:"li",href:"#compute-phase-success-conditions"},"Compute Phase fails"),", the execution of a message is aborted. The bounce message is not created in this case."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"CMP2")," \u2014 After the Compute Phase, the account's balance gets decreased exactly on the amount of consumed gas.")),(0,s.kt)("h4",{id:"action-phase-processing"},"Action Phase Processing"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"ACT1")," \u2014 Each successful ",(0,s.kt)("a",{parentName:"li",href:"#action-sendmsg"},"SendMsg")," action leads to creation of a message."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"ACT2")," \u2014 Successfully created message is added into the out queue exactly once."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"ACT3")," \u2014 If the action phase fails and the incoming message has the bounce flag set, then a single bounce message is generated and put into the out queue.")),(0,s.kt)("h4",{id:"bounce-phase-processing"},"Bounce Phase Processing"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"BNC1")," \u2014 The bounce message is generated only if and only if all of the following conditions hold:")),(0,s.kt)("p",null,"1) The incoming message is an internal message\n2) The incoming message has the bounce flag set\n3) During the message processing, the action phase was executed, but failed\n4) After the failed action phase, there is enough funds left on the incoming message balance to cover the bounce message processing",(0,s.kt)("sup",{parentName:"p",id:"fnref-2"},(0,s.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"BNC2")," \u2014 A bounce message attach all the original message value minus the storage, gas and delivery fees.")),(0,s.kt)("h2",{id:"footnotes"},"Footnotes"),(0,s.kt)("div",{className:"footnotes"},(0,s.kt)("hr",{parentName:"div"}),(0,s.kt)("ol",{parentName:"div"},(0,s.kt)("li",{parentName:"ol",id:"fn-1"},"Well, at least, until the part of the chain residing the transaction gets cut-off to reduce the disk space consumption.",(0,s.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,s.kt)("li",{parentName:"ol",id:"fn-2"},"See the definition of COMMIT TVM instruction.",(0,s.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}N.isMDXComponent=!0}}]);