"use strict";(self.webpackChunkeverscale_docs_website=self.webpackChunkeverscale_docs_website||[]).push([[8586],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),f=a,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||l;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6486:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_position:4},o="TVMCell Data structures",i={unversionedId:"develop/tvmcell-data-structure",id:"develop/tvmcell-data-structure",title:"TVMCell Data structures",description:"Everything in Everscale is stored in cells. A cell is a data structure containing:",source:"@site/../../src/develop/tvmcell-data-structure.md",sourceDirName:"develop",slug:"/develop/tvmcell-data-structure",permalink:"/develop/tvmcell-data-structure",draft:!1,editUrl:"https://github.com/everscale-org/docs/edit/main/.build/website/../../src/develop/tvmcell-data-structure.md",tags:[],version:"current",lastUpdatedAt:1688674209,formattedLastUpdatedAt:"Jul 6, 2023",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Actor model",permalink:"/develop/actor-model"},next:{title:"Smart Contracts, ABI and Messages",permalink:"/develop/sc-abi-messages"}},s={},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tvmcell-data-structures"},"TVMCell Data structures"),(0,a.kt)("p",null,"Everything in Everscale is stored in cells. A cell is a data structure containing:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"up to ",(0,a.kt)("strong",{parentName:"li"},"1023 bits")," of data (not bytes!)"),(0,a.kt)("li",{parentName:"ul"},"up to ",(0,a.kt)("strong",{parentName:"li"},"4 references")," to other cells")),(0,a.kt)("p",null,"Bits and references are not intermixed (they are stored separately). Circular references are forbidden: for any cell, none of its descendant cells can have this original cell as reference."),(0,a.kt)("p",null,"Thus, all cells constitute a directed acyclic graph (DAG)."),(0,a.kt)("p",null,"A cell is an opaque object optimized for compact storage."),(0,a.kt)("p",null,"In particular, it deduplicates data: if there are several eqivalent sub-cells referenced in different branches, their content is only stored once. However, opaqueness means that a cell cannot be modified or read directly."),(0,a.kt)("p",null,"Thus, there are 2 additional flavors of the cells:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Builder")," for partially constructed cells, for which fast operations for appending bitstrings, integers, other cells and references to other cells can be defined."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Slice")," for 'dissected' cells representing either the remainder of a partially parsed cell or a value (subcell) residing inside such a cell and extracted from it via a parsing instruction."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Continuation")," for cells containing op-codes (instructions) for internal use in TVM")),(0,a.kt)("p",null,"Any object in Everscale (message, message queue, block, whole blockchain state, contract code and data) serializes to a cell."),(0,a.kt)("p",null,"The process of serialization is described by a TL-B scheme: a formal description of how this object can be serialized into ",(0,a.kt)("em",{parentName:"p"},"Builder")," or how to parse an object of a given type from the ",(0,a.kt)("em",{parentName:"p"},"Slice"),"."),(0,a.kt)("p",null,"TL-B for cells is the same as TL or ProtoBuf for byte-streams."))}d.isMDXComponent=!0}}]);