"use strict";(self.webpackChunkeverscale_docs_website=self.webpackChunkeverscale_docs_website||[]).push([[9047],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=d(a),u=r,g=p["".concat(o,".").concat(u)]||p[u]||c[u]||s;return a?n.createElement(g,l(l({ref:t},m),{},{components:a})):n.createElement(g,l({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<s;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1829:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const s={title:"Message",description:"Smart-contracts communicate between each other"},l="Message",i={unversionedId:"arch/message",id:"arch/message",title:"Message",description:"Smart-contracts communicate between each other",source:"@site/../../src/arch/45-message.md",sourceDirName:"arch",slug:"/arch/message",permalink:"/arch/message",draft:!1,editUrl:"https://github.com/everscale-org/docs/edit/main/.build/website/../../src/arch/45-message.md",tags:[],version:"current",lastUpdatedAt:1686132519,formattedLastUpdatedAt:"Jun 7, 2023",sidebarPosition:45,frontMatter:{title:"Message",description:"Smart-contracts communicate between each other"},sidebar:"tutorialSidebar",previous:{title:"Accounts",permalink:"/arch/accounts"},next:{title:"Transactions",permalink:"/arch/transactions"}},o={},d=[{value:"Message Header",id:"message-header",level:2},{value:"Internal Message",id:"internal-message",level:2},{value:"InternalMessageHeader fields",id:"internalmessageheader-fields",level:4},{value:"External Message",id:"external-message",level:2},{value:"Events",id:"events",level:2},{value:"Reference",id:"reference",level:2}],m={toc:d},p="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"message"},"Message"),(0,r.kt)("p",null,"In Everscale, smart-contracts communicate between each other and with non-blockchain applications by means of an asynchronous message passing."),(0,r.kt)("p",null,"Technically, a message is a data structure encoding one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"desired function call at a destination smart-contract, optionally attaching some coins."),(0,r.kt)("li",{parentName:"ul"},"event log record to signal external observers about some significant state being reached")),(0,r.kt)("p",null,"A message consists of: ",(0,r.kt)("inlineCode",{parentName:"p"},"header")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"body"),". The header contains the information about the sender, receiver, value as well as the information required by the validator to apply the message to the block. The message body, in turn, comprises the payload of VM instructions that are necessary for the execution of the smart contract."),(0,r.kt)("p",null,"There are three types of messages on Everscale:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inbound external message")," - a message sent from outside onto the Everscale blockchain. It can be sent by any actor outside the blockchain. So-called messages from nowhere. Inbound external messages initiate changes to the blockchain\u2019s state. It is important to mention that external messages can not be value-bearing. They can only declare intent to transfer value to another account."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Internal message"),": a message sent from one contract to another. Like an inbound external message, it updates the blockchain's state. Only internal messages can be value-bearing."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Outbound external message"),": aka event - a message that can be emitted by a smart contract. Off-chain participants can subscribe to events within the Everscale network and receive them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Message {\n  header: CommonMsgInfo,\n  init: Option<StateInit>,\n  body: Option<SliceData>,\n  body_to_ref: Option<bool>,\n  init_to_ref: Option<bool>,\n}\n")),(0,r.kt)("p",null,"The last two fields ",(0,r.kt)("inlineCode",{parentName:"p"},"body_to_ref")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"init_to_ref")," are used only for serialization purpose, hence not considered in this document."),(0,r.kt)("h2",{id:"message-header"},"Message Header"),(0,r.kt)("p",null,"Any message has a message header: a data-structure defining, among other things, the message type and source and destination addresses."),(0,r.kt)("p",null,"The message header defines its type. It is described by the following enumeration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum CommonMsgInfo {\n  IntMsgInfo(InternalMessageHeader),\n  ExtInMsgInfo(ExternalInboundMessageHeader),\n  ExtOutMsgInfo(ExtOutMessageHeader),\n}\n")),(0,r.kt)("h2",{id:"internal-message"},"Internal Message"),(0,r.kt)("p",null,"Within Everscale blockchain, smart-contracts communicate with each other by exchanging messages. Messages sent by smart-contracts are called internal."),(0,r.kt)("p",null,"They are opposed to external messages that are sent by off-chain applications to smart-contracts."),(0,r.kt)("p",null,"The message header of an internal message is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct InternalMessageHeader {\n  pub ihr_disabled: bool,\n  pub bounce: bool,\n  pub bounced: bool,\n  pub src: MsgAddressIntOrNone,\n  pub dst: MsgAddressInt,\n  pub value: CurrencyCollection,\n  pub ihr_fee: Grams,\n  pub fwd_fee: Grams,\n  pub created_lt: u64,\n  pub created_at: UnixTime32,\n}\n")),(0,r.kt)("h4",{id:"internalmessageheader-fields"},"InternalMessageHeader fields"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ihr_disabled")),(0,r.kt)("td",{parentName:"tr",align:null},"IHR routing protocol disabled, always ",(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bounce")),(0,r.kt)("td",{parentName:"tr",align:null},"Should the answer message be generated in case of an error")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bounced")),(0,r.kt)("td",{parentName:"tr",align:null},"Is this message was auto-generated by error handling")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"src")),(0,r.kt)("td",{parentName:"tr",align:null},"Message source ",(0,r.kt)("a",{parentName:"td",href:"/arch/accounts#account-address"},"address"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dst")),(0,r.kt)("td",{parentName:"tr",align:null},"Message destination ",(0,r.kt)("a",{parentName:"td",href:"/arch/accounts#account-address"},"address"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of coins attached to the message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ihr_fee")),(0,r.kt)("td",{parentName:"tr",align:null},"IHR fee amount, always ",(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fwd_fee")),(0,r.kt)("td",{parentName:"tr",align:null},"Message delivery fee amount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"created_lt")),(0,r.kt)("td",{parentName:"tr",align:null},"Message creation logic time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"created_at")),(0,r.kt)("td",{parentName:"tr",align:null},"Message creation time in Epoch")))),(0,r.kt)("p",null,"Some clarifications:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bounced")," flag is set when the message itself was auto-generated as a result of an error. If the message with ",(0,r.kt)("em",{parentName:"li"},"bounced")," flag leads to an error itself, the next bounced message will not be generated."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is measured in Nano Evers (",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"msup"},"0"),(0,r.kt)("mrow",{parentName:"msup"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"9")))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"10^{-9}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"9"))))))))))))),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reated_lt")," is a monotonically increasing counter, thanks to this field, each new generated message is unique, even if the message payload is the same.  The message creation logic time is also used to guarantee order of delivery. We do not dive deep into this question, because it is protocol-level details.")),(0,r.kt)("h2",{id:"external-message"},"External Message"),(0,r.kt)("p",null,"External messages are created outside of the blockchain and get sent through specially distinguished validator nodes called DApp Servers",(0,r.kt)("sup",{parentName:"p",id:"fnref-2"},(0,r.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")),"."),(0,r.kt)("p",null,"External message header is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct ExternalInboundMessageHeader {\n  pub src: MsgAddressExt,\n  pub dst: MsgAddressInt,\n  pub import_fee: Grams,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fields ",(0,r.kt)("inlineCode",{parentName:"li"},"src")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"dst")," are source and destination addresses."),(0,r.kt)("li",{parentName:"ul"},"Field ",(0,r.kt)("inlineCode",{parentName:"li"},"import_fee")," should have been the value paid to the validator for processing an external message. But in the current node, this field is not used. Hence, the fee is not paid. We reported this issue to the developers."),(0,r.kt)("li",{parentName:"ul"},"The source address for an external message is always set to ",(0,r.kt)("inlineCode",{parentName:"li"},"AddrNone"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum MsgAddressExt {\n  AddrNone,\n  AddrExtern(MsgAddrExt),\n}\n")),(0,r.kt)("p",null,"The second variant ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrExtern")," is not supported currently."),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("p",null,"Event can be considered as a log record. It is used to signal external observers of reaching some significant state in a smart-contract."),(0,r.kt)("p",null,"Usually, observers are external non-blockchain applications that constantly monitor blockchain state",(0,r.kt)("sup",{parentName:"p",id:"fnref-3"},(0,r.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3")),". Other smart-contracts are not able to catch events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct ExtOutMessageHeader {\n  pub src: MsgAddressIntOrNone,\n  pub dst: MsgAddressExt,\n  pub created_lt: u64,\n  pub created_at: UnixTime32,\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum MsgAddressIntOrNone {\n  None,\n  Some(MsgAddressInt)\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/arch/executor"},"Transaction Executor")," automatically assigns the source address ",(0,r.kt)("inlineCode",{parentName:"li"},"src")," to be equal to the smart-contract address emitting the event."),(0,r.kt)("li",{parentName:"ul"},"The destination address ",(0,r.kt)("inlineCode",{parentName:"li"},"dst")," may contain any identifier. It is included for easier integration with off-chain applications, i.e. applications can monitor emitted events based on their destination address, and consume only those events destined to their custom identifier."),(0,r.kt)("li",{parentName:"ul"},"Fields ",(0,r.kt)("inlineCode",{parentName:"li"},"created_lt"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"created_at")," defines the logical creation time and epoch creation time.")),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-2"},"In the current protocol implementation, not all validator nodes process external messages. This is subject to change in the future protocol versions",(0,r.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-3"},"For example, by sending GraphQL requests to the DApp-server",(0,r.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")))))}c.isMDXComponent=!0}}]);